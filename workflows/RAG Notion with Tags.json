{
  "active": false,
  "connections": {
    "Filter Non-Text Content": {
      "main": [
        [
          {
            "node": "Summarize - Concatenate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion - Retrieve Page Content": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create metadata and load content": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Summarize - Concatenate": {
      "main": [
        [
          {
            "node": "Page - Concatenate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Notion Get Page",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Points",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notion Get Database",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Points1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Empty-Content": {
      "main": [
        [
          {
            "node": "FAQ - Concatenate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FAQ - Concatenate": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Get Page": {
      "main": [
        [
          {
            "node": "Filter Non-Text Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Get Database": {
      "main": [
        [
          {
            "node": "Filter Empty-Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Page - Concatenate": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Join Question Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Create metadata and load content",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "messageInfo": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join Question Content": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Keywords2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI3": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Create metadata and load content1": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store3",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Create metadata and load content1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Keywords2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Generate Keywords2": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "baseInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Keywords3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Keywords3",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Generate Keywords2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Keywords3",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate Keywords3": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "messageInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "reset memory chat": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store3": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store2": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "baseInfo": {
      "main": [
        [
          {
            "node": "Notion - Retrieve Page Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get calendar availability": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "List calendar unavailability": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar List Events": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar Get Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar Update Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar Cancel Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-10-17T02:36:39.982Z",
  "id": "n8AQXeZJk8CcXdBd",
  "meta": {
    "templateId": "2290",
    "templateCredsSetupCompleted": true
  },
  "name": "RAG Notion with Tags",
  "nodes": [
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "3f3e65dc-2b26-407c-87e5-52ba3b315fed",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        4140,
        100
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "https://www.notion.so/iBox-Delivery-1217c386d92280e5b2d2f380fec51672",
          "mode": "url"
        },
        "limit": 2,
        "simplifyOutput": false
      },
      "id": "e4a6f524-e3f5-4d02-949a-8523f2d21965",
      "name": "Notion - Retrieve Page Content",
      "type": "n8n-nodes-base.notion",
      "position": [
        1280,
        220
      ],
      "typeVersion": 2.2,
      "credentials": {
        "notionApi": {
          "id": "eyQfrNhyfucklowG",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e5b605e5-6d05-4bca-8f19-a859e474620f",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ $json.type }}",
              "rightValue": "image"
            },
            {
              "id": "c7415859-5ffd-4c78-b497-91a3d6303b6f",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ $json.type }}",
              "rightValue": "video"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bfebc173-8d4b-4f8f-a625-4622949dd545",
      "name": "Filter Non-Text Content",
      "type": "n8n-nodes-base.filter",
      "position": [
        2240,
        -120
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "pageId",
                "value": "={{ $('Loop Over Items').item.json.id }}"
              },
              {
                "name": "createdTime",
                "value": "={{ $('Loop Over Items').item.json.created_time }}"
              },
              {
                "name": "pageTitle",
                "value": "={{ $('Loop Over Items').item.json[$('Loop Over Items').item.json.type].title }}"
              },
              {
                "name": "pageType",
                "value": "={{ $('Loop Over Items').item.json.type.split('_')[1] }}"
              },
              {
                "name": "keywords",
                "value": "={{ $json.keywords }}"
              }
            ]
          }
        }
      },
      "id": "0e64dbb5-20c1-4b90-b818-a1726aaf5112",
      "name": "Create metadata and load content",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        4220,
        100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "content",
              "includeEmpty": true,
              "separateBy": "\n"
            }
          ]
        },
        "options": {
          "outputFormat": "separateItems"
        }
      },
      "id": "b04939f9-355a-430b-a069-b11800066313",
      "name": "Summarize - Concatenate",
      "type": "n8n-nodes-base.summarize",
      "position": [
        2440,
        -120
      ],
      "typeVersion": 1,
      "notes": "Summarize - Concatenate Notion's blocks content"
    },
    {
      "parameters": {},
      "id": "dbb03e3d-6cf0-4034-8508-75b739846153",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        920,
        220
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d269790f-c39b-4dd1-aaa2-dabff793ecf9",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1480,
        220
      ]
    },
    {
      "parameters": {
        "amount": 0.5
      },
      "id": "12cf521a-ce7a-487d-96d5-e5fe0262dae4",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4480,
        -100
      ],
      "webhookId": "1cafe18b-c037-46ff-9f89-b3a0cdcea0dc"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "=child_page",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "page"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "aeb2b436-3a30-43a4-b0e5-d1c9c9fbe70d",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "child_database",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "database"
            }
          ]
        },
        "options": {}
      },
      "id": "435bab7f-5e39-4a8c-a2bb-bfadcc897df1",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1680,
        240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e5b605e5-6d05-4bca-8f19-a859e474620f",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.property_answer }}",
              "rightValue": "image"
            },
            {
              "id": "c7415859-5ffd-4c78-b497-91a3d6303b6f",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.property_answer }}",
              "rightValue": "video"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6f7d1568-c6dc-4341-970a-b622d1b0cbe1",
      "name": "Filter Empty-Content",
      "type": "n8n-nodes-base.filter",
      "position": [
        2240,
        380
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "54e5667d-a9d0-443a-9807-d15c93656348",
              "name": "content",
              "value": "={{ $('Filter Empty-Content').item.json.property_question }}\n{{ $('Filter Empty-Content').item.json.property_answer }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "b0222ba8-8f4d-4dfa-955d-faee857d9b67",
      "name": "FAQ - Concatenate",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2640,
        380
      ]
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "returnAll": true
      },
      "id": "8a12001e-dbcc-4203-b638-d214b364e016",
      "name": "Notion Get Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2060,
        -120
      ],
      "executeOnce": true,
      "credentials": {
        "notionApi": {
          "id": "eyQfrNhyfucklowG",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "returnAll": true,
        "options": {}
      },
      "id": "9bbe16ef-d0b1-4732-ba66-8d24086e9f3a",
      "name": "Notion Get Database",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2060,
        380
      ],
      "executeOnce": true,
      "credentials": {
        "notionApi": {
          "id": "eyQfrNhyfucklowG",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4735dedc-34eb-43e7-81b5-9fba04146f14",
              "name": "instance_name",
              "value": "=notion_ibox",
              "type": "string"
            },
            {
              "id": "bd2fee21-3c39-4a7d-874c-97e46c55e63b",
              "name": "qdrant_api",
              "value": "http://qdrant:6333",
              "type": "string"
            },
            {
              "id": "cdbb4a0c-da8c-4bad-9b48-0353c0ab5640",
              "name": "vector_name",
              "value": "notion_ibox",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f43b4eb1-7cb2-45dd-a73b-6deb772976cf",
      "name": "baseInfo",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1100,
        220
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "54e5667d-a9d0-443a-9807-d15c93656348",
              "name": "content",
              "value": "={{ $json.concatenated_content.split('\\n\\n\\n') }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "7609f389-489d-4dc3-874d-d0ab224d0655",
      "name": "Page - Concatenate",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2640,
        -120
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.qdrant_api }}/collections/{{ $('baseInfo').first().json.vector_name }}/points",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"ids\": [\"05bc7f80-cf37-4eee-bad0-a250eecf7212\"],\n  \"with_payload\": [\"content\",\"metadata\"]\n}\n",
        "options": {}
      },
      "id": "82bcb5f9-5033-4589-8fa8-0fa3b63c0986",
      "name": "Retrive Points",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1260,
        -160
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $('baseInfo').first().json.qdrant_api }}/collections",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "6ea8ccf5-e32a-46ee-b837-8c0af968273a",
      "name": "List Collections",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        980,
        -440
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $('baseInfo').first().json.qdrant_api }}/collections/{{ $('baseInfo').first().json.vector_name }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "11d80639-68fd-424f-ab57-261ee5244c80",
      "name": "Get Collection Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        980,
        -300
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $('baseInfo').first().json.qdrant_api }}/collections/{{ $('baseInfo').first().json.vector_name }}/exists",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "679f8736-83c5-49f8-8c84-938c089fcdd3",
      "name": "Check Collection Existence",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        980,
        -160
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.qdrant_api }}/collections/{{ $('baseInfo').first().json.vector_name }}/points/scroll",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"with_payload\": [\"content\", \"metadata\"],\n    \"filter\": {\n      \"must\": [\n        {\n          \"key\": \"metadata.pageTitle\",\n          \"match\": {\n            \"value\": \"1227c386-d922-80f6-a189-da47933003d0\"\n          }\n        }\n      ]\n    }\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "0aa0c35c-0f0c-49cd-b9eb-a505dacc1925",
      "name": "Scroll Points",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1260,
        -440
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.qdrant_api }}/collections/{{ $('baseInfo').first().json.vector_name }}/points/delete",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"filter\": {\n      \"must\": [\n        {\n          \"key\": \"metadata.pageId\",\n          \"match\": {\n            \"value\": \"{{ $json.id }}\"\n          }\n        }\n      ]\n    }\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "7ac2bbdd-2002-479c-8ae9-cb1d3bc9e03f",
      "name": "Delete Points",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2060,
        60
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.qdrant_api }}/collections/{{ $('baseInfo').first().json.vector_name }}/points/scroll",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"with_payload\": [\"content\"],\n    \"filter\": {\n      \"should\": [\n        {\n          \"key\": \"metadata.pageId\",\n          \"match\": {\n            \"value\": \"1227c386-d922-80f6-a189-da47933003d0\"\n          }\n        }\n      ]\n    }\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "4ce9a017-8515-4ab1-b6c6-4502b5f8ba20",
      "name": "Scroll Points All",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1260,
        -300
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.qdrant_api }}/collections/{{ $('baseInfo').first().json.vector_name }}/points/delete",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"filter\": {\n      \"must\": [\n        {\n          \"key\": \"metadata.pageId\",\n          \"match\": {\n            \"value\": \"{{ $json.id }}\"\n          }\n        }\n      ]\n    }\n}",
        "options": {}
      },
      "id": "97b366bb-0ae5-489f-bcf5-f50e42269041",
      "name": "Delete Points1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2060,
        560
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "document.pageContent",
              "separateBy": "other",
              "customSeparator": "\\n\\n"
            }
          ]
        },
        "fieldsToSplitBy": "document.metadata.pageTitle",
        "options": {
          "continueIfFieldNotFound": true
        }
      },
      "id": "b8647a48-5de3-42e4-a6b0-a240cd2726a3",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2100,
        840
      ],
      "disabled": true
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "content"
            }
          ]
        },
        "options": {}
      },
      "id": "b66a1b47-5ee9-4dfd-84eb-e10aec98cd52",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2420,
        840
      ],
      "disabled": true
    },
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "maxTokens": 512,
          "temperature": 0.3,
          "maxRetries": 2
        }
      },
      "id": "8d38f261-3ea9-490d-9b80-b23098d374b5",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1700,
        1380
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "chunkOverlap": 100,
        "options": {
          "splitCode": "markdown"
        }
      },
      "id": "80a09794-0bcc-41d8-a1a2-9710792222e7",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        4200,
        220
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "c9e665b2-f15b-491b-bcb8-42604f47dd35",
      "name": "Embeddings OpenAI2",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        1780,
        1020
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function documentClean(text, processingRule) {…}\n\nconst processingRule = {\n    rules: JSON.stringify({\n        pre_processing_rules: [\n            { id: \"remove_extra_spaces\", enabled: true },\n            { id: \"remove_urls_emails\", enabled: true }\n        ]\n    })\n};\n\nreturn { concatenated_content: documentClean($json.concatenated_content, processingRule) };"
      },
      "id": "6a6414d4-8abe-4bea-923b-d716b5334d85",
      "name": "documentClean",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3760,
        180
      ],
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e4a3a0f5-0c9b-4c9b-9b9b-02705b44bc89",
              "name": "conversation",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "facf036f-0a35-4beb-92bb-718034133a95",
      "name": "messageInfo",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1520,
        1220
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e2d740b-6861-4b2e-a6c9-aca75b551540",
              "name": "content",
              "value": "={{ $json.document_metadata_pageTitle }}: {{ $json.concatenated_document_pageContent }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9ca1a45b-e6cb-404d-8b93-7094c2bd4318",
      "name": "Join Question Content",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2260,
        840
      ],
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "18d118f1-5967-493c-a31c-479d7b251d47",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3100,
        380
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "50c1e074-ded6-4b26-b4c7-61e981df770e",
      "name": "Embeddings OpenAI3",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        4160,
        600
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "pageId",
                "value": "={{ $('Loop Over Items').item.json.id }}"
              },
              {
                "name": "createdTime",
                "value": "={{ $('Loop Over Items').item.json.created_time }}"
              },
              {
                "name": "pageTitle",
                "value": "={{ $('Loop Over Items').item.json[$('Loop Over Items').item.json.type].title }}"
              },
              {
                "name": "pageType",
                "value": "={{ $('Loop Over Items').item.json.type.split('_')[1] }}"
              },
              {
                "name": "keywords",
                "value": "={{ $json.keywords }}"
              }
            ]
          }
        }
      },
      "id": "fe6284f4-7554-47df-973d-0fe6583e9465",
      "name": "Create metadata and load content1",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        4260,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chunkOverlap": 100,
        "options": {
          "splitCode": "markdown"
        }
      },
      "id": "81fe5c5f-44ab-4684-b100-26d32d4b0d9a",
      "name": "Recursive Character Text Splitter1",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        4240,
        720
      ]
    },
    {
      "parameters": {
        "content": "## Qdrant",
        "height": 512.0662957622236,
        "width": 457.9458021385195
      },
      "id": "a5540eb3-5939-4192-ae38-5688fd0f4136",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        940,
        -492.0582304950616
      ]
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"keywords\": {\n      \"type\": \"array\",\n      \"description\": \"Palavras-chave individuais relevantes, no máximo 5\",\n      \"maxItems\": 5,\n      \"items\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"required\": [\"keywords\"]\n}"
      },
      "id": "a95b290f-af4e-42c6-a4e4-e54346859c91",
      "name": "Structured Output Parser2",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        3400,
        700
      ]
    },
    {
      "parameters": {
        "amount": 2
      },
      "id": "058b174e-9bd4-459f-b928-2ae0bb27f14f",
      "name": "Wait1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4480,
        400
      ],
      "webhookId": "1cafe18b-c037-46ff-9f89-b3a0cdcea0dc"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9bacc086-2e2a-4af0-abde-5a129cd33b74",
              "name": "content",
              "value": "={{ $('Loop Over Items1').item.json.content }}",
              "type": "string"
            },
            {
              "id": "acffe725-4898-472d-bb42-a1fa27354467",
              "name": "keywords",
              "value": "={{ $json.output?.keywords ? $json.output.keywords.filter(item => item.length > 4).unique().map(item => item.toLowerCase()) : [] }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "b5eefe46-912a-476e-a781-3b8141089e95",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4020,
        400
      ]
    },
    {
      "parameters": {},
      "id": "27fff0b8-26d3-44f1-8293-7989daff1857",
      "name": "Auto-fixing Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        3380,
        580
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.content }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "Você é um especialista em identificação de palavras-chave. Sua tarefa é gerar palavras-chave altamente relevantes, tags e metadados com base no conteúdo fornecido pelo usuário. Separe todos os termos compostos em palavras-chave individuais para maximizar a cobertura semântica. Forneça até 5 itens em cada categoria (keywords, tags, metadatas)."
            }
          ]
        }
      },
      "id": "78fe49a0-6528-4aca-b5e6-5d072eedb56c",
      "name": "Generate Keywords2",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        3280,
        400
      ],
      "retryOnFail": true,
      "notesInFlow": false,
      "waitBetweenTries": 4000,
      "disabled": true
    },
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "maxTokens": 512,
          "temperature": 0.5,
          "maxRetries": 3
        }
      },
      "id": "8f24eb21-a46b-4176-bfcc-fa9aa02b1a4c",
      "name": "OpenAI Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2580,
        1020
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "2667be5b-c2ed-4fec-8393-0325fdd8f147",
      "name": "Loop Over Items2",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3100,
        -120
      ]
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"keywords\": {\n      \"type\": \"array\",\n      \"maxItems\": 5,\n      \"items\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"required\": [\"keywords\"]\n}"
      },
      "id": "cfddc836-099a-463c-83d4-ab864ea09834",
      "name": "Structured Output Parser3",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        3480,
        220
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9bacc086-2e2a-4af0-abde-5a129cd33b74",
              "name": "content",
              "value": "={{ $('Loop Over Items2').item.json.content }}",
              "type": "string"
            },
            {
              "id": "9cea7355-5c5e-4303-a839-9aff7c5af2f4",
              "name": "keywords",
              "value": "={{ $json.output?.keywords ? $json.output.keywords.filter(item => item.length > 4).unique().map(item => item.toLowerCase()) : [] }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "14531ed4-d3db-4fca-a9f7-52c95e338981",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4020,
        -100
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "content",
        "options": {}
      },
      "id": "388271d6-46f4-4a38-a116-089144996d81",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2860,
        -120
      ]
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {}
      },
      "id": "db61086b-ecd4-4953-8202-31d867b3d8b3",
      "name": "Groq Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3280,
        240
      ],
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {},
      "id": "1a9c5efa-9d72-4c00-b00e-f0d5b78e9c32",
      "name": "Auto-fixing Output Parser1",
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        3380,
        100
      ]
    },
    {
      "parameters": {
        "model": "llama-3.2-11b-text-preview",
        "options": {}
      },
      "id": "934e2c51-609f-41e6-a59b-ef281cf983a0",
      "name": "Groq Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3380,
        240
      ],
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.content }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "Você é um especialista em identificação de palavras-chave. Sua tarefa é gerar palavras-chave altamente relevantes com base no conteúdo fornecido pelo usuário. Separe todos os termos compostos em palavras-chave individuais para maximizar a cobertura semântica."
            }
          ]
        }
      },
      "id": "644ff65c-0539-46cf-9dae-5f48c3f10c28",
      "name": "Generate Keywords3",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        3280,
        -100
      ],
      "retryOnFail": true,
      "notesInFlow": false,
      "waitBetweenTries": 4000,
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "43d0a942-408e-4b14-841a-7ab2c7a30ba4",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        1360,
        1220
      ],
      "webhookId": "19a29629-c6aa-47ec-82b1-2f4ca64783ad"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "teste",
        "sessionTTL": 300,
        "contextWindowLength": 10
      },
      "id": "7206a58a-118b-48e9-8b91-9e16d882b327",
      "name": "Redis Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.3,
      "position": [
        2080,
        1460
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "operation": "delete",
        "key": "teste"
      },
      "id": "8f594c47-67f3-4347-ac65-f780b312ef48",
      "name": "reset memory chat",
      "type": "n8n-nodes-base.redisTool",
      "typeVersion": 1,
      "position": [
        1980,
        1460
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "start": "={{ $fromAI('date_init', 'sempre a partir do horário atual') }}",
        "end": "={{ $fromAI('date_end') }}",
        "additionalFields": {
          "description": "={{ $fromAI('description') }}",
          "summary": "={{ $fromAI('summary') }}"
        }
      },
      "id": "43e7f1ea-ceb6-4c43-992e-a8d1814a8a76",
      "name": "Google Calendar1",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        2480,
        1460
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "={{ $('baseInfo').item.json.vector_name }}",
          "mode": "id"
        },
        "options": {}
      },
      "id": "14fb9cf2-2164-49ac-8558-88cc90a0270c",
      "name": "Qdrant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        4180,
        -100
      ],
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "={{ $('baseInfo').item.json.vector_name }}",
          "mode": "id"
        },
        "options": {}
      },
      "id": "01b8514f-e8f0-473f-8680-604b02cb0c26",
      "name": "Qdrant Vector Store3",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        4180,
        400
      ],
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('messageInfo').item.json.conversation }}",
        "messages": {
          "messageValues": [
            {
              "type": "AIMessagePromptTemplate",
              "message": "=\n{{ $json.content.join('\\\\n\\\\n').replaceAll('\\\\n', '\\n') }}\n"
            },
            {
              "message": "=\nVocê é um atendente de suporte e venda da iBox Delivery, seu nome é Tefinha.\n\n## Diretrizes\n- Não responda nada que não tenha certeza do que esteja falando, evite inventar informação que não veio da \"AI\".\n- Use a data e hora atuais no formato ISO para requisições: `{{ $now.toISO() }}`. No entanto, nas respostas para o usuário, utilize o formato mais comum (ex: DD/MM/AAAA).\n- Não informe sobre taxas a não ser que seja perguntado.\n- Utilize emojis de maneira equilibrada para criar uma interação amigável.\n- Ao compartilhar links, forneça-os sem formatação (puro texto).\n- Para respostas longas, divida-as em partes para facilitar a compreensão do usuário.\n- Personalize as respostas usando o nome do usuário, quando possível e apropriado.\n- Seja sempre cordial e educado em suas respostas.\n- Mantenha respostas concisas e claras para evitar mal-entendidos.\n- Se não souber a resposta, seja transparente sobre isso e ofereça alternativas.\n- Nunca ofereça promessas ou garantias que não possam ser cumpridas.\n- Verifique sempre se há mais algo com que o cliente precise de ajuda antes de encerrar a conversa.\n- Adapte sua comunicação ao nível de entendimento do cliente para garantir clareza.\n- Responda às mensagens de forma oportuna e evite atrasos desnecessários.\n- Encoraje sempre a honestidade e a clareza nas comunicações.\n- Evite usar gírias ou linguagem informal em contextos profissionais.\n"
            }
          ]
        }
      },
      "id": "97702057-35be-49db-af74-beda09c4efda",
      "name": "Basic LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        2580,
        840
      ],
      "executeOnce": true,
      "disabled": true
    },
    {
      "parameters": {
        "mode": "load",
        "qdrantCollection": {
          "__rl": true,
          "value": "notion_ibox",
          "mode": "list",
          "cachedResultName": "notion_ibox"
        },
        "prompt": "={{ $('messageInfo').item.json.conversation }}",
        "topK": 5,
        "options": {
          "searchFilterJson": "{\n  \"should\": [\n    {\n      \"key\": \"metadata.pageType\",\n      \"match\": {\n        \"value\": \"database\"\n      }\n    }\n  ]\n}"
        }
      },
      "id": "ab9808e5-b326-44d0-8eca-f075a84ec464",
      "name": "Qdrant Vector Store2",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        1780,
        840
      ],
      "alwaysOutputData": true,
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true,
      "notes": "{\n  \"should\": [\n    {\n      \"key\": \"metadata.keywords\",\n      \"match\": {\n        \"any\": {{ $json.output.keywords.filter(item => item.length > 4).unique().toJsonString() }}\n      }\n    }\n  ]\n}"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to get the calendar availability for a particular period on the calendar. The tool may refer to availability as \"Free\" or \"Busy\".\n\nIf the tool returns an empty response, it means that something went wrong. It does not mean that there is no availability.",
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "timeMin": "={{ $fromAI('startTime', 'format 2024-10-27T23:48:34', 'string') }}",
        "timeMax": "={{ $fromAI('endTime', 'format 2024-10-27T23:48:34', 'string') }}",
        "options": {
          "outputFormat": "availability"
        }
      },
      "id": "44f9a7ac-1e64-4588-8190-102db94fd74e",
      "name": "Get calendar availability",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        1600,
        1640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to get the calendar unavailability for a particular period on the calendar. The tool may refer to unavailability as \"Busy\".\n\nIf the tool returns an empty response, it means that something went wrong. It does not mean that there is no unavailability.",
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "timeMin": "={{ $fromAI('startTime', 'format 2024-10-27T23:48:34', 'string') }}",
        "timeMax": "={{ $fromAI('endTime', 'format 2024-10-27T23:48:34', 'string') }}",
        "options": {
          "outputFormat": "bookedSlots"
        }
      },
      "id": "63533f6f-6b78-4d75-8034-5dd02ae9d5ac",
      "name": "List calendar unavailability",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        1740,
        1640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "options": {}
      },
      "id": "99a7a71a-03d3-49b6-99b5-872c16867e6a",
      "name": "Google Calendar List Events",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        1880,
        1640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to return details of an event using the ID found. If you don't have the ID at the moment, use the tool that lists the events and then use the ID of the event that the user wants.\n\nIf the tool returns an empty response, it means that something went wrong. This does not mean that there is no downtime.",
        "operation": "get",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('id') }}",
        "options": {
          "maxAttendees": 10
        }
      },
      "id": "269fd497-0147-4b16-b517-02b6e7811b5d",
      "name": "Google Calendar Get Event",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        2020,
        1640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('id') }}",
        "updateFields": {
          "description": "={{ $fromAI('description') }}",
          "end": "=",
          "start": "="
        }
      },
      "id": "4bb75b44-3cb4-4064-af3c-679636a95396",
      "name": "Google Calendar Update Event",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        2160,
        1640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('messageInfo').item.json.conversation }}",
        "options": {
          "systemMessage": "=## About the appointments\nThe date and time now is {{ $now.toISO() }}. All dates should be given in the ISO format.\nEach appointment should have a start and end date and time relative to today's date in the future.\nAll appointments are strictly 30mins long.",
          "maxIterations": 10,
          "returnIntermediateSteps": false
        }
      },
      "id": "2f9d4095-de7b-48db-bc02-ac4d85b36802",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        1700,
        1220
      ],
      "notes": "You are an appointment scheduling helper for consultant named William.\n\n## About William\nWilliam is a São Paulo-based consultant specialising in Laravel, n8n and AI. His website is wmst.com.br.\n\n## About the appointments\nAlways start your conversation by politely asking if the user wants to book a new appointment or enquire about an existing one.\nThe date and time now is {{ $now.toISO() }}. All dates should be given in the ISO format.\nEach appointment should have a start and end date and time relative to today's date in the future.\nAll appointments are strictly 30mins long.\n\n## To book an appointment\n* Before booking an appointment, ask if the user has an existing appointment.\n* Ensure you have the user's email address, full name and proposed date, preferred start time before booking an appointment.\n* Always check the calendar availability of the user's proposed date and time. If there is no availability, suggest the next available appointment slot.\n* If the appointment booking is successful, notify the user that an email confirmation will be sent to their provided email address.\n* If the appointment booking is unsuccessful, notify the user that you are unable to complete their request at the moment and to try again later.\n\n## To find an existing appointment\n* Ask the user for their email address and date of the existing booking\n* Use the user's email and date to search for the existing booking.\n* If the user's email and date do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.\n\n# To reschedule or cancel an existing appointment\n* First find the existing appointment so that you may obtain the existing appointment's booking ID.\n* Display this booking ID to the user.\n* Use this booking ID to reschedule or cancel an existing appointment.\n* If an existing appointment ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to cancel an appointment, ask for a reason for the cancellation and suggest rescheduling as an alternative. Confirm with user before cancelling an appointment.\n\n## About the user\nThe user's session id is {{ $json.sessionId }}"
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('id') }}",
        "options": {}
      },
      "id": "eb0f5f8b-b005-44d3-83c4-b24f508f7564",
      "name": "Google Calendar Cancel Event",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        2300,
        1640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {},
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-09-27T17:42:17.034Z",
      "updatedAt": "2024-09-27T17:42:17.034Z",
      "id": "TsfCA8eZuTObjOfy",
      "name": "Backup"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-10-28T03:44:29.707Z",
  "versionId": "c75552b5-bfcb-467f-a13b-877de08e6118"
}