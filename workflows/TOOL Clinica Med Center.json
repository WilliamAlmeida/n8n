{
  "active": false,
  "connections": {
    "EWT": {
      "main": [
        [
          {
            "node": "Request to Tool?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query": {
      "main": [
        [
          {
            "node": "EWT 2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "EWT Fixed": {
      "main": [
        [
          {
            "node": "EWT 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contextual Compression Retriever": {
      "ai_retriever": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Retriever": {
      "ai_retriever": [
        [
          {
            "node": "Contextual Compression Retriever",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Question and Answer Chain": {
      "main": [
        [
          {
            "node": "Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Contextual Compression Retriever",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Question and Answer Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Qdant Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Qdant Vector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Retriever",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Format Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Procedures": {
      "main": [
        [
          {
            "node": "Data Cached?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Procedures": {
      "main": [
        [
          {
            "node": "Response3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Procedures": {
      "main": [
        [
          {
            "node": "Response3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Procedures": {
      "main": [
        [
          {
            "node": "Set Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Procedures": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Tool": {
      "main": [
        [
          {
            "node": "Response In Development",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Appointment Scheduling Agent": {
      "main": [
        [
          {
            "node": "Response2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Availability Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Find Existing Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cancel Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reschedule Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Procedures Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Chat": {
      "main": [
        [
          {
            "node": "Query",
            "type": "main",
            "index": 0
          },
          {
            "node": "EWT Fixed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request to Tool?": {
      "main": [
        [
          {
            "node": "Switch Tool",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Agent": {
      "main": [
        [
          {
            "node": "Reset Memo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Cached?": {
      "main": [
        [
          {
            "node": "List Procedures",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Load Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset Memo": {
      "main": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-15T18:33:48.659Z",
  "id": "JZY3GPC55leuxyHn",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "TOOL Clinica Med Center",
  "nodes": [
    {
      "parameters": {},
      "id": "031ea9fc-c53f-4a6f-88be-a070538aa4d6",
      "name": "EWT",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        740,
        760
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a1123d8e-c791-4dda-bbd0-e24c5b1d35d2",
              "name": "query",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9ec9d580-43c2-4945-aaad-7f1f28b18556",
      "name": "Query",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        520,
        920
      ],
      "disabled": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"query\": \"\",\n  \"agent\": \"calendar\",\n  \"messageInfo\": {\n    \"evo_api\": \"https://apiwp.wmst.com.br\",\n    \"instance\": \"ibox_cli_23\",\n    \"remoteJid\": \"5512982184879@s.whatsapp.net\",\n    \"pushName\": \"W.M. Soluções Tecnologicas\",\n    \"fromMe\": false,\n    \"unique_id\": \"william_5512982184879\",\n    \"debounce_time\": 5,\n    \"conversation\": \"oi, poderia verificar meu agendamento para quando foi marcado?\"\n  },\n  \"userAccount\": {\n    \"id\": 1,\n    \"nome\": \"William\",\n    \"sobrenome\": \"Almeida\",\n    \"nome_completo\": \"William Almeida\",\n    \"whatsapp\": \"12982184879\",\n    \"email\": \"williamkillerca@hotmail.com\",\n    \"endereco\": \"Rua Doutor Laércio Lincon Figueira, D19, Portal Das Palmeiras, Lorena - Sp\"\n  },\n  \"prompt\": \"\"\n}",
        "options": {}
      },
      "id": "be94c5e9-9db6-4c9d-8d3a-dec6a39dd78a",
      "name": "EWT Fixed",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        520,
        1080
      ],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "80fcf8d3-0a4e-47b6-ac93-e701d21f1db6",
      "name": "Contextual Compression Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrieverContextualCompression",
      "typeVersion": 1,
      "position": [
        1620,
        440
      ],
      "disabled": true
    },
    {
      "parameters": {
        "topK": "={{ $json.slots }}"
      },
      "id": "cfcd75ea-4251-4628-88d9-396589171d7c",
      "name": "Vector Store Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
      "typeVersion": 1,
      "position": [
        1900,
        440
      ],
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemPromptTemplate": "Use the following pieces of context to answer the users question. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}"
        }
      },
      "id": "93ba3023-aa4c-4b47-bb1f-7d21841045c0",
      "name": "Question and Answer Chain",
      "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
      "typeVersion": 1.3,
      "position": [
        1500,
        240
      ],
      "disabled": true
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {
          "temperature": 0
        }
      },
      "id": "55e590d8-f110-455f-9290-9597ba46e430",
      "name": "Groq Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1500,
        440
      ],
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "e099ff70-e0ca-42ef-9c3d-4cfb790973a5",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        2460,
        440
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "qdrantCollection": {
          "__rl": true,
          "value": "notion_faro",
          "mode": "list",
          "cachedResultName": "notion_faro"
        },
        "options": {
          "searchFilterJson": "={\n  \"should\": [\n    {\n      \"key\": \"metadata.type\",\n      \"match\": {\n        \"value\": \"{{ $('EWT').item.json.type ?? '' }}\"\n      }\n    }\n  ]\n}"
        }
      },
      "id": "2899748b-af1e-4b24-ae12-1409240e7eb8",
      "name": "Qdant Vector Store1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        2180,
        440
      ],
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "=data",
        "include": "allFieldsExcept",
        "fieldsToExclude": "instances_id,active,id,created_at,empresa,cal_username",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1900,
        660
      ],
      "id": "efea46ed-0c5f-431e-b4f4-45954303df22",
      "name": "Aggregate",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('EWT').item.json.messageInfo.instance }}_{{ $workflow.id\n}}_procedures",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1460,
        740
      ],
      "id": "87dcc586-bccd-4b23-a808-6f01162d1d2f",
      "name": "Get Procedures",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('EWT').item.json.messageInfo.instance }}_{{ $workflow.id\n}}_procedures",
        "value": "={{ $json.data.toJsonString() }}",
        "keyType": "string",
        "expire": true,
        "ttl": 120
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2180,
        660
      ],
      "id": "7f9c8a7b-ae2f-4d63-b6a4-694d19087707",
      "name": "Set Procedures",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "27078474-0533-4004-8718-c55a54a5e46c",
              "name": "data",
              "value": "={{ $json.data.length ? $json.data.parseJson() : '' }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1760,
        820
      ],
      "id": "bcc01bd3-7804-4e7c-99d2-b7f28bf225c4",
      "name": "Load Procedures"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f8d70ac3-ee0f-45ae-a0f8-cb0d54876bb3",
              "name": "data",
              "value": "={{ $('List Procedures').all().map(item => {\n  return {\n  professional: item.json.subtitle,\n  procedure: item.json.operation,\n  event_id: item.json.cal_event_id,\n  crm: item.json.extras?.crm.toNumber(),\n  }\n}) }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2040,
        660
      ],
      "id": "bec003e2-cc18-47ec-ab23-5b596fd0c1a7",
      "name": "Format Procedures"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "calendars",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "instance_name",
              "condition": "eq",
              "keyValue": "={{ $('EWT').item.json.messageInfo.instance }}"
            },
            {
              "keyName": "active",
              "condition": "eq",
              "keyValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1760,
        660
      ],
      "id": "06a09ac2-87ba-4933-9049-7b593ff8f4de",
      "name": "List Procedures",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "WWYYqpMcDDFZTW3g",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.tool }}",
                    "rightValue": "rag",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "RAG"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5ece5fd9-4267-4bf2-a1b7-23b5d1c2362f",
                    "leftValue": "={{ $json.tool }}",
                    "rightValue": "procedures",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Procedures"
            }
          ]
        },
        "options": {}
      },
      "id": "6ce5f04b-155b-4f55-9972-ed22f2b8cc00",
      "name": "Switch Tool",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1120,
        720
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93b3a4ae-a50c-4b62-9872-f980bc19054c",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "84c653aa-55b7-408c-a70a-e65247e2ef30",
      "name": "Response2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2100,
        1140
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b49db797-0bdf-457d-8ba0-e7cf175881e5",
              "name": "response",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "25b096a1-f682-42a6-9bb2-b82e07ab178d",
      "name": "Response3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2300,
        820
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=You are an appointment scheduling helper.\n\nThe date and time now is {{ $now.toISO() }}. All dates should be given in the ISO format.\nEach appointment should have a start and end date and time relative to today's date in the future.\nAlways show appointment UID.\nDuration consult is 60 min.\n\n## About user\nThe user's email is {{ $json.userAccount.email }}, cellphone is {{ $json.messageInfo.remoteJid.split('@')[0] }}, name is {{ ($json.userAccount.nome) ? $json.userAccount.nome : $json.messageInfo.pushName }} and address is {{ $json.userAccount.endereco ?? '' }}.\n\n## Template Event, hidden info if not provied\n📅 **{title}**\n\nStatus: **Scheduled or Cancelled** ✅\nScheduled for **{start}** until **{end}**\nLocal: **{location}**\nID: **{ID}** / UID: **{UID}**\n\n## Language\nRespond all in pt-BR, display date in d/M/Y and in a humanized way.",
          "maxIterations": 5
        }
      },
      "id": "4babc4bb-6c11-40f7-afb6-bfc121f313cd",
      "name": "Appointment Scheduling Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        1780,
        1140
      ],
      "notes": "You are an appointment scheduling helper for consultant named William.\n\n## About William\nWilliam is a São Paulo-based consultant specialising in Laravel, n8n and AI. His website is wmst.com.br.\n\n## About the appointments\nAlways start your conversation by politely asking if the user wants to book a new appointment or enquire about an existing one.\nThe date and time now is {{ $now.toISO() }}. All dates should be given in the ISO format.\nEach appointment should have a start and end date and time relative to today's date in the future.\nAll appointments are strictly 30mins long.\n\n## To book an appointment\n* Before booking an appointment, ask if the user has an existing appointment.\n* Ensure you have the user's email address, full name and proposed date, preferred start time before booking an appointment.\n* Always check the calendar availability of the user's proposed date and time. If there is no availability, suggest the next available appointment slot.\n* If the appointment booking is successful, notify the user that an email confirmation will be sent to their provided email address.\n* If the appointment booking is unsuccessful, notify the user that you are unable to complete their request at the moment and to try again later.\n\n## To find an existing appointment\n* Ask the user for their email address and date of the existing booking\n* Use the user's email and date to search for the existing booking.\n* If the user's email and date do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.\n\n# To reschedule or cancel an existing appointment\n* First find the existing appointment so that you may obtain the existing appointment's booking ID.\n* Display this booking ID to the user.\n* Use this booking ID to reschedule or cancel an existing appointment.\n* If an existing appointment ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to cancel an appointment, ask for a reason for the cancellation and suggest rescheduling as an alternative. Confirm with user before cancelling an appointment.\n\n## About the user\nThe user's session id is {{ $json.sessionId }}"
    },
    {
      "parameters": {
        "name": "get_availability_tool",
        "description": "Call this tool to get the appointment availability using event id.",
        "workflowId": {
          "__rl": true,
          "value": "5LfFRdaepFJdM4yE",
          "mode": "list",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "availability"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"startTime\": \"date and time of the start of the booking\",\n  \"endTime\": \"end date and time, if specified, limited to a maximum of 3 days after 'startTime'. If 'endTime' is not given, the default value is 24 hours after 'startTime'.\",\n  \"event_id\": \"event id, event identification number\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2140,
        1440
      ],
      "id": "edc94a5f-7ab6-43d4-ba0e-9a341f9d256e",
      "name": "Get Availability Tool"
    },
    {
      "parameters": {
        "name": "get_existing_appt_tool",
        "description": "=Call this tool to get an existing booking.\n\n## To detail an existing booking\n* Ask the user for their booking_uid of the existing booking\n* Use the user's booking_uid to search for the existing booking.\n* If the user's booking_uid do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "find booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"booking_uid\": \"the uid of the booking\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2260,
        1420
      ],
      "id": "7f237841-e763-4397-9870-b1c4777cde63",
      "name": "Get Existing Appt Tool"
    },
    {
      "parameters": {
        "name": "find_existing_appt_tool",
        "description": "=Call this tool to search for an existing reservation with the user's email address using event id.\n\n## To find an existing appointment\n* Ask the user for their email address if not provided.\n* Use the user's email to search for the existing reservation.\n* If the user's email do not match the results or no results are returned, the existing reservation was not found.\n* If the existing reservation is not found, notify the user and suggest a new reservation be made.\n\n# Status options upcoming, recurring, past, cancelled, unconfirmed. If no \"status\" is provided, pass as \"all\"\n\n# If no \"event id\" is provided, pass as empty.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "list bookings"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"attendeeEmail\": {\n      \"type\": \"string\",\n      \"description\": \"the e-mail of the attendee\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"event_id\": {\n      \"type\": \"string\",\n      \"description\": \"event id, event identification number separated by a comma\"\n    }\n  },\n  \"required\": [\n    \"attendeeEmail\",\n    \"status\",\n    \"event_id\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2620,
        1360
      ],
      "id": "4dd86eb4-e62e-4eb1-aa78-07e5772bba38",
      "name": "Find Existing Appt Tool"
    },
    {
      "parameters": {
        "name": "cancel_appt_tool",
        "description": "=Call this tool to cancel a user's existing booking using a booking uid.\n\n# To cancel an existing booking\n* First find the existing booking so that you may obtain the existing booking's booking UID.\n* Display this booking UID to the user.\n* Use this booking UID to cancel an existing booking.\n* If an existing booking UID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to cancel an booking, ask for a reason for the cancellation and suggest rescheduling as an alternative. Confirm with user before cancelling an booking.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "cancel booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"cancellationReason\": \"reason for cancellation\",\n  \"booking_uid\": \"the booking UID of the appointment\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2500,
        1380
      ],
      "id": "ac72bff6-f5b8-4597-bd79-d21574a4695c",
      "name": "Cancel Appt Tool"
    },
    {
      "parameters": {
        "name": "schedule_appt_tool",
        "description": "=Call this tool to schedule an appointment using event id.\n\n## To book an booking\n* Before booking an booking, ask if the user has an existing booking.\n* Ensure you have the user's email address, full name, cellphone and proposed date, preferred start time before booking an booking.\n* Always check the calendar availability of the user's proposed date and time. If there is no availability, suggest the next available booking slot.\n* If the booking booking is successful, notify the user that an email confirmation will be sent to their provided email address.\n* If the booking booking is unsuccessful, notify the user that you are unable to complete their request at the moment and to try again later.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "schedule booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"start\": \"date and time of the start of the booking\",\n  \"title\": \"\",\n  \"description\": \"\",\n  \"attendee\": {\n    \"name\": \"\",\n    \"email\": \"\"\n  },\n  \"bookingFieldsResponses\": {\n    \"notes\": \"\",\n    \"cellphone\": \"12982184877\",\n    \"professional\": \"\",\n    \"procedure\": \"\",\n    \"method_payment\": \"\",\n    \"name_plan\": \"\",\n    \"price\": \"\"\n  },\n  \"event_id\": \"event id, event identification number\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2020,
        1460
      ],
      "id": "c56148c9-e174-4896-8c12-f6eff039ed39",
      "name": "Schedule Appt Tool"
    },
    {
      "parameters": {
        "name": "reschedule_appt_tool",
        "description": "=Call this tool to reschedule a user's appointment using a booking uid and event id.\n\n# To reschedule an existing booking\n* First find the existing booking so that you may obtain the existing booking's booking UID.\n* Display this booking UID to the user.\n* Use this booking UID to reschedule an existing appointment.\n* If an existing booking UID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to reschedule an booking, ask for a reason for the rescheduling. Confirm with user before rescheduling an booking.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "reschedule booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n\"type\": \"object\",\n  \"properties\": {\n    \"booking_uid\": {\n      \"type\": \"string\",\n      \"description\": \"the uid of the booking\"\n    },\n    \"start\": {\n      \"type\": \"string\",\n      \"description\": \"date and time of the start of the booking\"\n    },\n    \"reschedulingReason\": {\n      \"type\": \"string\",\n      \"description\": \"rescheduling reason\"\n    },\n    \"event_id\": {\n      \"type\": \"string\",\n      \"description\": \"event id, event identification number\"\n    }\n  },\n  \"required\": [\n    \"booking_id\",\n    \"start\",\n    \"reschedulingReason\",\n    \"event_id\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2380,
        1400
      ],
      "id": "0fb315e4-d637-4167-b8b0-cf776e9a551e",
      "name": "Reschedule Appt Tool"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=memo_{{ $('EWT').first().json.messageInfo.unique_id }}_clinica",
        "sessionTTL": 300
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.3,
      "position": [
        1720,
        1360
      ],
      "id": "690c918f-448f-416a-b23a-d8b056fddc1c",
      "name": "Chat Memory",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "temperature": 0.2,
          "topP": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1600,
        1380
      ],
      "id": "5e0c3074-7231-4059-b25e-2578852771c4",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "name": "procedures_tool",
        "description": "Use this tool to obtain the EVENT ID and information about the specialists (doctors) and procedures provided by the clinic.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "JZY3GPC55leuxyHn",
          "cachedResultName": "TOOL Clinica Med Center"
        },
        "fields": {
          "values": [
            {
              "name": "tool",
              "stringValue": "procedures"
            },
            {
              "name": "messageInfo",
              "type": "objectValue",
              "objectValue": "={{ $json.messageInfo }}"
            }
          ]
        }
      },
      "id": "98ed3f19-6468-4615-8e4e-1fdd5db62c09",
      "name": "Procedures Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1860,
        1360
      ]
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1480,
        1400
      ],
      "id": "8f308a70-9a11-445d-ba7b-091000666b71",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "content": "## Function Cal",
        "height": 240,
        "width": 760,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1980,
        1340
      ],
      "id": "f49b0c91-1cbb-45bf-85eb-c1c5e6d56ffc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "760374de-6e34-46ca-9918-905a36c32c1d",
      "name": "Chat",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        320,
        1000
      ],
      "webhookId": "5ecf7029-8384-49fb-a1e1-ee505c3f1321",
      "disabled": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "23b0e203-6fae-425e-8945-9bf9e5eb437c",
      "name": "EWT 2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        740,
        1000
      ],
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3d3f5973-0888-4a4a-9b95-74a7908fcf4c",
              "leftValue": "={{ $json.agent }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "309a8f36-ceba-4d09-a0ff-97bba24c00d3",
      "name": "Request to Tool?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        760
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.agent }}",
                    "rightValue": "calendar",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "calendar"
            }
          ]
        },
        "options": {}
      },
      "id": "ca609f71-ebaf-427b-b5d4-c2adfd9472ab",
      "name": "Switch Agent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1120,
        1140
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "08781159-d933-43ce-8f8d-c043d0501403",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1620,
        740
      ],
      "id": "9728c09b-20a4-478b-b02c-035febda0142",
      "name": "Data Cached?"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=memo_{{ $('EWT').first().json.messageInfo.unique_id }}_clinica"
      },
      "id": "8d9813e1-5af7-459b-966a-8489f332debb",
      "name": "Reset Memo",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1620,
        1140
      ],
      "alwaysOutputData": true,
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b49db797-0bdf-457d-8ba0-e7cf175881e5",
              "name": "response",
              "value": "={{ $json.response.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4f2d1555-c5dd-47d4-ac12-392d83dafbfa",
      "name": "Response1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1820,
        240
      ],
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b49db797-0bdf-457d-8ba0-e7cf175881e5",
              "name": "response",
              "value": "=in development",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "16a11653-c133-4f38-943a-06bf9e07de80",
      "name": "Response In Development",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1320,
        240
      ]
    },
    {
      "parameters": {
        "content": "## Procedures\nList with Professionals, Event ID (Cal.com)\nand Especilizations",
        "height": 380,
        "width": 1020,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1420,
        620
      ],
      "id": "ac24d5a0-5c05-447f-a0d5-f7a5c76119fc",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-09-27T14:34:01.317Z",
      "updatedAt": "2024-09-27T14:34:01.317Z",
      "id": "ZoTSEGR97fzorfDz",
      "name": "AI"
    },
    {
      "createdAt": "2024-09-27T17:42:17.034Z",
      "updatedAt": "2024-09-27T17:42:17.034Z",
      "id": "TsfCA8eZuTObjOfy",
      "name": "Backup"
    },
    {
      "createdAt": "2024-10-30T23:31:05.255Z",
      "updatedAt": "2024-10-30T23:31:05.255Z",
      "id": "IDsda42rHm8bi7eR",
      "name": "Tool"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-11-16T14:38:38.309Z",
  "versionId": "ee6dcf73-9d33-46ec-a480-2eb136e1e98d"
}