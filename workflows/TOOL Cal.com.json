{
  "active": false,
  "connections": {
    "Chat": {
      "main": [
        [
          {
            "node": "baseInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Availability Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Appointment Scheduling Agent": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Find Existing Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cancel Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reschedule Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Format Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Procedures": {
      "main": [
        [
          {
            "node": "data cached?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Procedures": {
      "main": [
        [
          {
            "node": "Set Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Procedures": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Procedures": {
      "main": [
        [
          {
            "node": "Normalize Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Procedures": {
      "main": [
        [
          {
            "node": "Normalize Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "baseInfo": {
      "main": [
        [
          {
            "node": "Get Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "data cached?": {
      "main": [
        [
          {
            "node": "List Procedures",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Load Procedures",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EWT": {
      "main": [
        [
          {
            "node": "baseInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Procedures": {
      "main": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-09-29T21:36:02.298Z",
  "id": "czYf0DoNjwOMFK8Q",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "TOOL Cal.com",
  "nodes": [
    {
      "parameters": {
        "toolDescription": "Call this tool to schedule an appointment.",
        "method": "POST",
        "url": "https://api.cal.com/v1/bookings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "calApi",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "parametersBody": {
          "values": [
            {
              "name": "eventTypeId",
              "valueProvider": "fieldValue",
              "value": "={{ 1195761 }}"
            },
            {
              "name": "start"
            },
            {
              "name": "end"
            },
            {
              "name": "title",
              "valueProvider": "fieldValue",
              "value": "{title}"
            },
            {
              "name": "description",
              "valueProvider": "fieldValue",
              "value": "{description}"
            },
            {
              "name": "metadata"
            },
            {
              "name": "responses"
            },
            {
              "name": "timeZone",
              "valueProvider": "fieldValue",
              "value": "America/Sao_Paulo"
            },
            {
              "name": "language",
              "valueProvider": "fieldValue",
              "value": "en"
            }
          ]
        },
        "placeholderDefinitions": {
          "values": [
            {
              "name": "description",
              "description": "bullet list of session Id, full name, email and summary of appointment",
              "type": "string"
            },
            {
              "name": "title",
              "description": "name of the user and a short summary of appointment",
              "type": "string"
            },
            {
              "name": "responses",
              "description": "Use template: { \"name\": \"\", \"email\": \"\", \"location\":  { \"value\": \"inPerson\", \"optionValue\": \"\" }, \"guests\": [] }|Ensure output is valid json.",
              "type": "json"
            },
            {
              "name": "metadata",
              "description": "Use template: { \"session_id\": \"\", \"booked_by\": \"n8n workflow\" }",
              "type": "json"
            }
          ]
        }
      },
      "id": "19a1e64e-4a5f-421e-a766-807a6d7a5d47",
      "name": "Schedule Appt",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        2800,
        80
      ],
      "credentials": {
        "calApi": {
          "id": "xICGic9UQ3lxjrpb",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "=Call this tool to reschedule a user's appointment using a booking id.\n\n# To reschedule an existing booking\n* First find the existing booking so that you may obtain the existing booking's booking ID.\n* Display this booking ID to the user.\n* Use this booking ID to reschedule an existing appointment.\n* If an existing booking ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to reschedule an booking, ask for a reason for the rescheduling. Confirm with user before rescheduling an booking.",
        "method": "POST",
        "url": "https://api.cal.com/v2/bookings/{booking_id}/reschedule",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "cal-api-version",
              "valueProvider": "fieldValue",
              "value": "={{ $('baseInfo').item.json.cal_api_version_booking }}"
            }
          ]
        },
        "sendBody": true,
        "parametersBody": {
          "values": [
            {
              "name": "start",
              "valueProvider": "fieldValue",
              "value": "{start}"
            },
            {
              "name": "reschedulingReason",
              "valueProvider": "fieldValue",
              "value": "{reschedulingReason}"
            }
          ]
        },
        "placeholderDefinitions": {
          "values": [
            {
              "name": "booking_id",
              "description": "the booking id of the appointment",
              "type": "string"
            },
            {
              "name": "start",
              "description": "start datetime of the appointment, for example: \"2024-05-30T12:00:00.000Z\"",
              "type": "string"
            },
            {
              "name": "reschedulingReason",
              "description": "rescheduling reason",
              "type": "string"
            }
          ]
        }
      },
      "id": "89a46777-5352-47a7-bd31-356dae60cf8d",
      "name": "Reschedule Appt",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        2960,
        260
      ],
      "credentials": {
        "calApi": {
          "id": "xICGic9UQ3lxjrpb",
          "name": "william"
        },
        "httpHeaderAuth": {
          "id": "Xk4lHr8zzqWTdh4Z",
          "name": "Cal.com Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Call this tool to cancel a user's existing appointment using a booking id.\n\n# To cancel an existing appointment\n* First find the existing appointment so that you may obtain the existing appointment's booking ID.\n* Display this booking ID to the user.\n* Use this booking ID to cancel an existing appointment.\n* If an existing appointment ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to cancel an appointment, ask for a reason for the cancellation and suggest rescheduling as an alternative. Confirm with user before cancelling an appointment.",
        "method": "POST",
        "url": "https://api.cal.com/v2/bookings/{booking_id}/cancel",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "cal-api-version",
              "valueProvider": "fieldValue",
              "value": "={{ $('baseInfo').item.json.cal_api_version_booking }}"
            }
          ]
        },
        "sendBody": true,
        "parametersBody": {
          "values": [
            {
              "name": "cancellationReason",
              "valueProvider": "modelOptional"
            }
          ]
        },
        "placeholderDefinitions": {
          "values": [
            {
              "name": "booking_id",
              "description": "the booking id of the appointment",
              "type": "string"
            }
          ]
        }
      },
      "id": "36cab6b3-c87a-46ea-9620-9b7fffaa04b7",
      "name": "Cancel Appt",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        3120,
        80
      ],
      "credentials": {
        "calApi": {
          "id": "xICGic9UQ3lxjrpb",
          "name": "william"
        },
        "httpHeaderAuth": {
          "id": "Xk4lHr8zzqWTdh4Z",
          "name": "Cal.com Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Call this tool to get the appointment availability.",
        "url": "https://api.cal.com/v2/slots/available",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "eventTypeId",
              "valueProvider": "fieldValue",
              "value": "={{ $json.cal_event_id }}"
            },
            {
              "name": "startTime",
              "valueProvider": "fieldValue",
              "value": "={{ $now.toISO() }}"
            },
            {
              "name": "endTime",
              "valueProvider": "fieldValue",
              "value": "={{ $now.plus(4, 'days') }}"
            }
          ]
        },
        "optimizeResponse": true,
        "dataField": "data"
      },
      "id": "025554e7-1b2b-4379-a380-6d7451abfb15",
      "name": "Get Availability",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        2800,
        260
      ],
      "credentials": {
        "calApi": {
          "id": "xICGic9UQ3lxjrpb",
          "name": "william"
        },
        "httpHeaderAuth": {
          "id": "Xk4lHr8zzqWTdh4Z",
          "name": "Cal.com Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Call this tool to get an existing appointment.\n\n## To find an existing appointment\n* Ask the user for their email address and date of the existing booking\n* Use the user's email and date to search for the existing booking.\n* If the user's email and date do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.",
        "url": "https://api.cal.com/v2/bookings/{appointment_id}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "cal-api-version",
              "valueProvider": "fieldValue",
              "value": "={{ $('baseInfo').item.json.cal_api_version_booking }}"
            }
          ]
        },
        "placeholderDefinitions": {
          "values": [
            {
              "name": "appointment_id",
              "description": "the id of the appointment",
              "type": "string"
            }
          ]
        }
      },
      "id": "1eccb4a1-3fb4-4f1b-8708-ef621355d846",
      "name": "Get Existing Appt",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        2960,
        80
      ],
      "credentials": {
        "calApi": {
          "id": "xICGic9UQ3lxjrpb",
          "name": "william"
        },
        "httpHeaderAuth": {
          "id": "Xk4lHr8zzqWTdh4Z",
          "name": "Cal.com Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Call this tool to search for an existing appointment with the user's email address.",
        "url": "https://api.cal.com/v2/bookings",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "attendeeEmail"
            }
          ]
        }
      },
      "id": "c25e4b00-f6ff-4305-bad8-e672beb2b82d",
      "name": "Find Existing Appt",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        3120,
        260
      ],
      "credentials": {
        "calApi": {
          "id": "xICGic9UQ3lxjrpb",
          "name": "william"
        },
        "httpHeaderAuth": {
          "id": "Xk4lHr8zzqWTdh4Z",
          "name": "Cal.com Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('EWT').first().json.query }}",
        "options": {
          "systemMessage": "=You are an appointment scheduling helper.\n\n## About\nAdditional Information: {{ $json.data.replaceAll('\"', '') }}\n\nThe date and time now is {{ $now.toISO() }}. All dates should be given in the ISO format.\nEach appointment should have a start and end date and time relative to today's date in the future.\nAlways show appointment UID.\n\n## About the user\nThe user's email is {{ $('EWT').first().json.userAccount.email }} and cellphone is {{ $('EWT').first().json.messageInfo.remoteJid.split('@')[0] }}.\n\n## Output\n\nAlways respond in *pt-BR*, display date in d/M/Y and in a humanized way.\n\n# Format Event\n📅 **Appointment Confirmed**\n\n**Status:** Confirmed ✅\n**Start:**\n**End:**\n**Duration:**\n**Location:**\n**ID:**\n**UID:**"
        }
      },
      "id": "aa638579-b587-424d-8195-3fbda86a41a1",
      "name": "Appointment Scheduling Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        1480,
        380
      ],
      "notes": "You are an appointment scheduling helper for consultant named William.\n\n## About William\nWilliam is a São Paulo-based consultant specialising in Laravel, n8n and AI. His website is wmst.com.br.\n\n## About the appointments\nAlways start your conversation by politely asking if the user wants to book a new appointment or enquire about an existing one.\nThe date and time now is {{ $now.toISO() }}. All dates should be given in the ISO format.\nEach appointment should have a start and end date and time relative to today's date in the future.\nAll appointments are strictly 30mins long.\n\n## To book an appointment\n* Before booking an appointment, ask if the user has an existing appointment.\n* Ensure you have the user's email address, full name and proposed date, preferred start time before booking an appointment.\n* Always check the calendar availability of the user's proposed date and time. If there is no availability, suggest the next available appointment slot.\n* If the appointment booking is successful, notify the user that an email confirmation will be sent to their provided email address.\n* If the appointment booking is unsuccessful, notify the user that you are unable to complete their request at the moment and to try again later.\n\n## To find an existing appointment\n* Ask the user for their email address and date of the existing booking\n* Use the user's email and date to search for the existing booking.\n* If the user's email and date do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.\n\n# To reschedule or cancel an existing appointment\n* First find the existing appointment so that you may obtain the existing appointment's booking ID.\n* Display this booking ID to the user.\n* Use this booking ID to reschedule or cancel an existing appointment.\n* If an existing appointment ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to cancel an appointment, ask for a reason for the cancellation and suggest rescheduling as an alternative. Confirm with user before cancelling an appointment.\n\n## About the user\nThe user's session id is {{ $json.sessionId }}"
    },
    {
      "parameters": {},
      "id": "1889dc5b-510c-4e9e-91eb-c3c6def8a207",
      "name": "Chat",
      "type": "@n8n/n8n-nodes-langchain.manualChatTrigger",
      "typeVersion": 1.1,
      "position": [
        600,
        -60
      ],
      "disabled": true
    },
    {
      "parameters": {
        "name": "get_availability_tool",
        "description": "Call this tool to get the appointment availability using event id.",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "5LfFRdaepFJdM4yE"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "availability"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"startTime\": \"date and time of the start of the booking\",\n  \"endTime\": \"end date and time, if specified, limited to a maximum of 4 days after 'startTime'. If 'endTime' is not given, the default value is 24 hours after 'startTime'.\",\n  \"event_id\": \"event id, event identification number\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1900,
        640
      ],
      "id": "8e308e00-33d6-47cc-a189-17c72d181b14",
      "name": "Get Availability Tool"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1c0e1856-c7f0-4e9b-b4ac-1d704417b91c",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1820,
        380
      ],
      "id": "424c9bc5-dc9e-4270-be54-1050e8d946a0",
      "name": "Response"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('EWT').item.json.messageInfo.unique_id}}_calendary",
        "sessionTTL": 60
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.3,
      "position": [
        1560,
        640
      ],
      "id": "2f8b69cb-4bf9-4ddf-9b11-1ff0ddbb71b8",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "name": "get_existing_appt_tool",
        "description": "=Call this tool to get an existing booking.\n\n## To detail an existing booking\n* Ask the user for their booking_id of the existing booking\n* Use the user's booking_id to search for the existing booking.\n* If the user's booking_id do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.",
        "workflowId": {
          "__rl": true,
          "value": "5LfFRdaepFJdM4yE",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "find booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"booking_id\": \"the id of the booking\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2080,
        640
      ],
      "id": "c8ca4e43-f0fa-42ca-be49-a5786a209d26",
      "name": "Get Existing Appt Tool"
    },
    {
      "parameters": {
        "name": "find_existing_appt_tool",
        "description": "=Call this tool to search for an existing booking with the user's email address using event id.\n\n## To find an existing appointment\n* Ask the user for their email address and date of the existing booking\n* Use the user's email and date to search for the existing booking.\n* If the user's email and date do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.\n\n# Status options upcoming, recurring, past, cancelled, unconfirmed. If no \"status\" is given, pass as \"all\"",
        "workflowId": {
          "__rl": true,
          "value": "5LfFRdaepFJdM4yE",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "list bookings"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"attendeeEmail\": \"the e-mail of the attendee\",\n  \"status\": \"\",\n  \"event_id\": \"event id, event identification number separated by a comma\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2600,
        640
      ],
      "id": "b36c23e2-af15-403a-bc28-fc1310b95c6c",
      "name": "Find Existing Appt Tool"
    },
    {
      "parameters": {
        "name": "cancel_appt_tool",
        "description": "=Call this tool to cancel a user's existing booking using a booking id.\n\n# To cancel an existing booking\n* First find the existing booking so that you may obtain the existing booking's booking ID.\n* Display this booking ID to the user.\n* Use this booking ID to cancel an existing booking.\n* If an existing booking ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to cancel an booking, ask for a reason for the cancellation and suggest rescheduling as an alternative. Confirm with user before cancelling an booking.",
        "workflowId": {
          "__rl": true,
          "value": "5LfFRdaepFJdM4yE",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "cancel booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"cancellationReason\": \"reason for cancellation\",\n  \"booking_id\": \"the booking id of the appointment\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2420,
        640
      ],
      "id": "1c0840e1-9467-442d-80ef-0f1a4ca0cf77",
      "name": "Cancel Appt Tool"
    },
    {
      "parameters": {
        "name": "schedule_appt_tool",
        "description": "=Call this tool to schedule an appointment using event id.\n\n## To book an booking\n* Before booking an booking, ask if the user has an existing booking.\n* Ensure you have the user's email address, full name, cellphone and proposed date, preferred start time before booking an booking.\n* Always check the calendar availability of the user's proposed date and time. If there is no availability, suggest the next available booking slot.\n* If the booking booking is successful, notify the user that an email confirmation will be sent to their provided email address.\n* If the booking booking is unsuccessful, notify the user that you are unable to complete their request at the moment and to try again later.",
        "workflowId": {
          "__rl": true,
          "value": "5LfFRdaepFJdM4yE",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "schedule booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"start\": \"date and time of the start of the booking\",\n  \"title\": \"\",\n  \"description\": \"\",\n  \"attendee\": {\n    \"name\": \"\",\n    \"email\": \"\"\n  },\n  \"bookingFieldsResponses\": {\n    \"notes\": \"\",\n    \"cellphone\": \"12982184877\",\n    \"professional\": \"\",\n    \"procedure\": \"\",\n    \"method_payment\": \"\",\n    \"name_plan\": \"\",\n    \"price\": \"\"\n  },\n  \"event_id\": \"event id, event identification number\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1720,
        640
      ],
      "id": "8e3dcf5f-e24d-48a5-9bc4-a5f6e1f61d99",
      "name": "Schedule Appt Tool"
    },
    {
      "parameters": {
        "name": "reschedule_appt_tool",
        "description": "=Call this tool to reschedule a user's appointment using a booking id and event id.\n\n# To reschedule an existing booking\n* First find the existing booking so that you may obtain the existing booking's booking ID.\n* Display this booking ID to the user.\n* Use this booking ID to reschedule an existing appointment.\n* If an existing booking ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to reschedule an booking, ask for a reason for the rescheduling. Confirm with user before rescheduling an booking.",
        "workflowId": {
          "__rl": true,
          "value": "5LfFRdaepFJdM4yE",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "reschedule booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"booking_id\": \"the id of the booking\",\n  \"start\": \"date and time of the start of the booking\",\n  \"reschedulingReason\": \"rescheduling reason\",\n  \"event_id\": \"event id, event identification number\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2240,
        640
      ],
      "id": "9e98be2e-691b-4978-ba4b-0866aa2cf51d",
      "name": "Reschedule Appt Tool"
    },
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "temperature": 0.5,
          "topP": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1400,
        640
      ],
      "id": "4926d947-4833-4308-a427-283525641bea",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1240,
        640
      ],
      "id": "c7bfc01b-6ece-4f36-b20d-d55fc013c0cf",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "=data",
        "include": "allFieldsExcept",
        "fieldsToExclude": "instances_id,active,id,created_at,empresa,cal_username",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1460,
        0
      ],
      "id": "852aba51-d587-4b40-8092-a1e35aa2666d",
      "name": "Aggregate",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('EWT').first().json.messageInfo.instance }}_calendary",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        940,
        120
      ],
      "id": "1df5a3af-eec4-4f73-87bd-37c41ff41f73",
      "name": "Get Procedures",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('EWT').first().json.messageInfo.instance }}_calendary",
        "value": "={{ $json.data.toJsonString() }}",
        "keyType": "string",
        "expire": true,
        "ttl": 120
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1800,
        0
      ],
      "id": "08792bcb-0956-434f-8080-9517d7e2d397",
      "name": "Set Procedures",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "27078474-0533-4004-8718-c55a54a5e46c",
              "name": "data",
              "value": "={{ $json.data.length ? $json.data.parseJson() : '' }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1280,
        200
      ],
      "id": "a973904e-c839-4c42-8aa4-96bae0868721",
      "name": "Load Procedures"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f8d70ac3-ee0f-45ae-a0f8-cb0d54876bb3",
              "name": "data",
              "value": "={{ $('List Procedures').all().map(item => {\n  return {\n  professional: item.json.subtitle,\n  procedure: item.json.operation,\n  event_id: item.json.cal_event_id,\n  crm: item.json.extras?.crm.toNumber(),\n  }\n}) }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1640,
        0
      ],
      "id": "bb430b47-4a64-4095-8a31-843b01454ae0",
      "name": "Format Procedures"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "calendars",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "instance_name",
              "condition": "eq",
              "keyValue": "={{ $('EWT').item.json.messageInfo.instance }}"
            },
            {
              "keyName": "active",
              "condition": "eq",
              "keyValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1280,
        0
      ],
      "id": "a7436564-d6d1-490d-bde0-4848f68da2bb",
      "name": "List Procedures",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "WWYYqpMcDDFZTW3g",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 400,
        "width": 340
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        800,
        320
      ],
      "id": "2a88794e-e89a-48d8-a3bb-afae7e4ddf47",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b82786e-fd77-43a9-af1a-be1403cfc12d",
              "name": "cal",
              "value": "={\n  \"api\": \"https://api.cal.com\",\n  \"api_version_booking\": \"2024-08-13\",\n  \"api_version_event\": \"2024-06-14\",\n  \"utc\": 3\n}",
              "type": "object"
            },
            {
              "id": "899a52c8-56c7-444f-9317-9553c2bdbc1e",
              "name": "cal.username",
              "value": "williamalmeida",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        780,
        120
      ],
      "id": "2d84a3f5-8a27-4297-8fe3-e6c3627e83f4",
      "name": "baseInfo"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "08781159-d933-43ce-8f8d-c043d0501403",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1100,
        120
      ],
      "id": "ee54788e-dab6-4440-9188-584b7938c807",
      "name": "data cached?"
    },
    {
      "parameters": {},
      "id": "d053efbd-3b93-48ce-8273-c07cc5a4684c",
      "name": "EWT",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        600,
        120
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "83f51543-5ede-4cbc-9453-e111b664483b",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1460,
        200
      ],
      "id": "b406afc4-c0b3-4ef6-9dd5-ceeeec77255b",
      "name": "Normalize Procedures"
    }
  ],
  "pinData": {
    "EWT": [
      {
        "json": {
          "query": "Verificar disponibilidade de horários com a Dra. Rita de Cássia Marton Carneiro para uma consulta pediátrica o quanto antes.",
          "agent": "calendar",
          "messageInfo": {
            "evo_api": "https://apiwp.wmst.com.br",
            "instance": "ibox_cli_23",
            "remoteJid": "5512982184879@s.whatsapp.net",
            "pushName": "W.M. Soluções Tecnologicas",
            "fromMe": false,
            "unique_id": "william_5512982184879",
            "debounce_time": 5,
            "conversation": "meu filho esta resfriado, o quanto antes melhor"
          },
          "userAccount": {
            "id": 1,
            "nome": "William",
            "sobrenome": "Almeida",
            "nome_completo": "William Almeida",
            "whatsapp": "12982184879",
            "email": "williamkillerca@hotmail.com",
            "endereco": "Rua Doutor Laércio Lincon Figueira, D19, Portal Das Palmeiras, Lorena - Sp"
          },
          "prompt": "meu filho esta resfriado, o quanto antes melhor"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Cal.com Trigger": {
      "webhookId": "992ce188-0fce-4a68-866f-f76b682bdcb5"
    }
  },
  "tags": [
    {
      "createdAt": "2024-09-27T17:42:17.034Z",
      "updatedAt": "2024-09-27T17:42:17.034Z",
      "id": "TsfCA8eZuTObjOfy",
      "name": "Backup"
    },
    {
      "createdAt": "2024-10-30T23:31:05.255Z",
      "updatedAt": "2024-10-30T23:31:05.255Z",
      "id": "IDsda42rHm8bi7eR",
      "name": "Tool"
    },
    {
      "createdAt": "2024-09-27T14:34:01.317Z",
      "updatedAt": "2024-09-27T14:34:01.317Z",
      "id": "ZoTSEGR97fzorfDz",
      "name": "AI"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-11-16T01:51:11.883Z",
  "versionId": "9d67c11c-9f91-4bca-9f68-c40cf0251961"
}