{
  "active": false,
  "connections": {
    "reset memo": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "messageInfo": {
      "main": [
        [
          {
            "node": "delete user account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set user account": {
      "main": [
        [
          {
            "node": "userAccount",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Account User": {
      "main": [
        [
          {
            "node": "set user account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get user account": {
      "main": [
        [
          {
            "node": "Json2Object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has user account?": {
      "main": [
        [
          {
            "node": "userAccount",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Account User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete user account": {
      "main": [
        [
          {
            "node": "get user account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "userAccount": {
      "main": [
        [
          {
            "node": "config prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "wk response whatsapp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "config prompt": {
      "main": [
        [
          {
            "node": "reset memo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Store Info Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "messageInfo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis Retrive Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Json2Object": {
      "main": [
        [
          {
            "node": "has user account?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion": {
      "main": [
        [
          {
            "node": "Notion Get Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Non-Text Content": {
      "main": [
        [
          {
            "node": "Summarize - Concatenate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize - Concatenate": {
      "main": [
        [
          {
            "node": "Page - Concatenate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Get Page": {
      "main": [
        [
          {
            "node": "Filter Non-Text Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Page - Concatenate": {
      "main": [
        [
          {
            "node": "Redis Set in Cache",
            "type": "main",
            "index": 0
          },
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Page in Cache?": {
      "main": [
        [
          {
            "node": "Notion",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Page Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Retrive Page": {
      "main": [
        [
          {
            "node": "Page in Cache?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Page Info": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Reset Memory": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar List Delivery": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Cancel Delivery": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Register Delivery": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Update Delivery": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "baseInfo": {
      "main": [
        [
          {
            "node": "chatInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Message": {
      "main": [
        [
          {
            "node": "Fix Text 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structure Message": {
      "main": [
        [
          {
            "node": "messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Transcription Image": {
      "main": [
        [
          {
            "node": "Fix Text 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Transcription Audio": {
      "main": [
        [
          {
            "node": "Fix Text 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Base64": {
      "main": [
        [
          {
            "node": "Media Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert To Audio": {
      "main": [
        [
          {
            "node": "Groq Analyze Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert To Image": {
      "main": [
        [
          {
            "node": "Groq Analyze Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix Text 2": {
      "main": [
        [
          {
            "node": "Structure Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatInfo": {
      "main": [
        [
          {
            "node": "Message Type",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Analyze Audio": {
      "main": [
        [
          {
            "node": "Format Transcription Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Analyze Image": {
      "main": [
        [
          {
            "node": "Groq Normalize Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Normalize Image": {
      "main": [
        [
          {
            "node": "Format Transcription Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Media Type": {
      "main": [
        [
          {
            "node": "Convert To Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert To Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "messages": {
      "main": [
        [
          {
            "node": "Merge 2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Response WK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type": {
      "main": [
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Base64",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Beautify URL": {
      "main": [
        [
          {
            "node": "Fix Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "baseInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Beautify URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatConfig": {
      "main": [
        [
          {
            "node": "messageInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat": {
      "main": [
        [
          {
            "node": "chatConfig",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-10-29T17:27:55.734Z",
  "id": "iWjqb3RWtfplz63k",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AI 4 Liquigas Lorena",
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "maxTokens": 1024,
          "temperature": 0.4,
          "topP": 0.9
        }
      },
      "id": "64fcf222-569e-4df4-a321-68828aad37d1",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        5120,
        1520
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "content": "## Gera a Resposta\nObs.: Seleciona a Base de Dados a ser usada de acordo com a Empresa de maneira Dinâmica e a usa para responder a solicitação",
        "height": 584.136756451777,
        "width": 854.1019126589118
      },
      "id": "2004699d-fbd2-4e07-a5f9-aaf2124ee0f6",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4958,
        1242
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=memo_{{ $('messageInfo').first().json.unique_id }}_liquid_gas"
      },
      "id": "191215db-adea-40a9-87d9-5610f1a3cac4",
      "name": "reset memo",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        5016,
        1363
      ],
      "alwaysOutputData": true,
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "K7oBqF1vnvw165RG"
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "id": "d7b3c079-eaf2-4782-9ac0-c1bf44067dd1",
      "name": "wk response whatsapp",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        6160,
        1160
      ],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "5be86688-aa97-4e3b-9608-50e32c10dfce",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        3780,
        1740
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.body ?? $json }}",
        "options": {}
      },
      "id": "4508b2f7-933d-461e-8ea0-7d1a8924f810",
      "name": "messageInfo",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4140,
        1160
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=user_account_{{ $('messageInfo').item.json.remoteJid.split('@')[0] }}",
        "value": "={{ $json.user.toJsonString() ?? {} }}",
        "expire": true,
        "ttl": "={{ $json.user ? 120 : 60 }}"
      },
      "id": "c422c71b-8580-417a-a642-b30a69568ac6",
      "name": "set user account",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4738,
        1521
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://ibox.delivery/api/whatsapp/user?number={{ $('messageInfo').item.json.remoteJid.split('@')[0] }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "with_plan"
            },
            {
              "name": "with_stores"
            }
          ]
        },
        "options": {}
      },
      "id": "e1b45dcc-281e-4466-ba7e-38cb94f476c0",
      "name": "Get Account User",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4580,
        1520
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "user_account",
        "key": "=user_account_{{ $('messageInfo').item.json.remoteJid.split('@')[0] }}",
        "keyType": "string",
        "options": {}
      },
      "id": "32115b2e-de6f-4605-8d7c-befc91824a55",
      "name": "get user account",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4378,
        1541
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc151548-39ab-4280-8766-cb8f68fc41d8",
              "leftValue": "={{ $json.user_account.id }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9938c6d6-4d62-4f44-bedc-3260bc26798c",
      "name": "has user account?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4580,
        1320
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=user_account_{{ $('messageInfo').item.json.remoteJid.split('@')[0] }}"
      },
      "id": "830d9639-e893-4a01-b46f-edec004ff3f1",
      "name": "delete user account",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4380,
        1320
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Tenta retornar os dados do Usuário",
        "height": 635.2219705306627,
        "width": 598.5677101799579,
        "color": 5
      },
      "id": "51aecc1a-e404-428c-8775-5afe7e938d8b",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4320,
        1240
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.user_account ?? $json.user ?? {} }}",
        "options": {}
      },
      "id": "c4bf8b76-e5d3-477f-9090-57c33b409f86",
      "name": "userAccount",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4778,
        1321
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n    \"evo_api\": \"https://apiwp.wmst.com.br\",\n    \"instance\": \"william\",\n    \"remoteJid\": \"5512982184879@s.whatsapp.net\",\n    \"pushName\": \"W.M. Soluções Tecnologicas\",\n    \"fromMe\": false,\n    \"unique_id\": \"william_5512982184879\",\n    \"debounce_time\": 5,\n    \"conversation\": \"{{ $json.chatInput }}\"\n  }",
        "options": {}
      },
      "id": "94492ea1-c050-4028-9de3-f9d07a20686e",
      "name": "chatConfig",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4040,
        940
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "05c031ce-37b6-40bd-9866-3a1b561b466e",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        6020,
        1160
      ],
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "08eccb40-00d8-4101-a52e-f6cbaf728cd1",
              "name": "system",
              "value": "=<prompt_mestre_liquigas>\n<personalidade>\nNome: Léo da Liquigás\nFunção: Assistente virtual especializado no atendimento ao cliente Liquigás (pedidos de gás e informações).\nTom: Educado, prestativo, ágil.\n\n<funcoes_principais>\nReceber pedidos\nEsclarecer dúvidas sobre produtos\nInformar sobre segurança\nDisponibilizar horários e locais\nEncaminhar para atendimento humano, se necessário\n\n<regras_gerais>\nRespostas claras e objetivas (máx. 350 caracteres)\nLinguagem acessível, sem termos técnicos\nEncaminhar casos complexos a um atendente humano\nSempre consultar a base de dados antes de responder dúvidas\n\n<formatacao_links>\nLinks devem ser escritos por extenso, em linha separada, sem formatação. Exemplo:\n\"Mais informações: https://revendaliquigas.com.br/produtos\"\nPerguntar ao cliente se precisa de mais detalhes após o envio.\n\n<fluxo_atendimento>\nSaudação e apresentação\nIdentificar necessidade\nApresentar produtos\nEsclarecer dúvidas\nEnviar links, se necessário\nEncaminhar ao atendimento humano, se preciso\n\n<cliente_direto>\nResponder diretamente a links/produtos específicos. Exemplo:\n\"Interessado no Gás P-13! Posso enviar o link do pedido?\"\n\n<recomendacoes_produtos>\nEm caso de dúvidas, sugerir até 3 opções.\n\n<seguranca>\nInformar que produtos são seguros, cuidados básicos e links adicionais de segurança, se solicitado.\n\n<agendamento_entrega>\nPara agendamento, preciso confirmar algumas informações:\n- Nome do Cliente: {{ $('userAccount').first().json.nome ?? 'Nome não informado' }}\n- Endereço: {{ $('userAccount').first().json.endereco ?? 'Endereço não informado' }} (Se precisar alterar, informe o novo endereço)\n- Telefone: {{ $('userAccount').first().json.whatsapp ?? 'Telefone não informado' }}\n- Data e horário: [Solicitar]\n- Produto: [Nome do Produto via store_info_tool]\n- Preço: [Preço via store_info_tool]\n\nEsses dados são obrigatórios para prosseguir. Por favor, confirme ou faça as alterações necessárias. Um atendente entrará em contato para finalizar o processo.\nNUNCA envie o link após o agendamento.\n\n<dicas_uso_produtos>\nDicas práticas: troca de botijão, manutenção, procedimentos de segurança.\n\n<informacoes_adicionais>\nData e Hora Atual: {{ $now.toISO() }}\n\n<dados_cliente>\nJá é cliente? {{ $('userAccount').item.json.id ? 'yes' : 'no' }}\nNome: {{ $('userAccount').first().json.nome ?? $('messageInfo').first().json.pushName }}\nE-mail: {{ $('userAccount').first().json.email ?? '' }}\nTelefone: {{ $('userAccount').first().json.whatsapp ?? $('messageInfo').first().json.remoteJid.split('@')[0] }}\nEndereço: {{ $('userAccount').first().json.endereco ?? '' }}\n</prompt_mestre_liquigas>\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "3f1e35ef-91a0-4ce0-b129-07b6bde97434",
      "name": "config prompt",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5018,
        1621
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=memo_{{ $('messageInfo').first().json.unique_id }}_liquid_gas",
        "sessionTTL": 300,
        "contextWindowLength": 15
      },
      "id": "6b34b233-9aa7-465e-af2f-64f063d8b827",
      "name": "Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.3,
      "position": [
        5220,
        1520
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "name": "store_info_tool",
        "description": "Chame essa ferramenta para consultar qualquer informação que lhe for perguntada, sobre empresa, produtos, contatos.",
        "workflowId": {
          "__rl": true,
          "value": "iWjqb3RWtfplz63k",
          "mode": "list",
          "cachedResultName": "AI 4 Liquigas Lorena"
        }
      },
      "id": "495def57-f9c0-436c-9d60-2e29994e2adb",
      "name": "Store Info Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        5278,
        1661
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b49db797-0bdf-457d-8ba0-e7cf175881e5",
              "name": "response",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "8f661228-393e-4bec-8fd7-c62c15e035b9",
      "name": "Response WK",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5080,
        2480
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "maxTokens": 512,
          "temperature": 0.9,
          "topP": 0.9
        }
      },
      "id": "eb0f7117-f213-47ab-9ad2-cc003bdf64d2",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4680,
        2680
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3d3f5973-0888-4a4a-9b95-74a7908fcf4c",
              "leftValue": "={{ $json.query }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "dcb87ff2-e4ac-43f2-8c45-ec1039db0afe",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3940,
        1740
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "675594ce-198a-45d4-b185-4caacb169a93",
              "name": "user_account",
              "value": "={{ $json.user_account }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "26603a21-f447-4007-92d8-57028b93cd4b",
      "name": "Json2Object",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4438,
        1721
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "https://www.notion.so/Revenda-Liquig-s-Lorena-1217c386d92280b59418e30646dfbddc",
          "mode": "url"
        }
      },
      "id": "3c6c9ed0-05df-4d2f-843d-762e2e1b7bf3",
      "name": "Notion",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        4560,
        2200
      ],
      "credentials": {
        "notionApi": {
          "id": "eyQfrNhyfucklowG",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e5b605e5-6d05-4bca-8f19-a859e474620f",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ $json.type }}",
              "rightValue": "image"
            },
            {
              "id": "c7415859-5ffd-4c78-b497-91a3d6303b6f",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ $json.type }}",
              "rightValue": "video"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c76e953f-c118-4239-a015-75c954470357",
      "name": "Filter Non-Text Content",
      "type": "n8n-nodes-base.filter",
      "position": [
        4920,
        2200
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "content",
              "includeEmpty": true,
              "separateBy": "\n"
            }
          ]
        },
        "options": {
          "outputFormat": "separateItems"
        }
      },
      "id": "62cfe8b2-3cfa-49e7-a06c-0039695f631b",
      "name": "Summarize - Concatenate",
      "type": "n8n-nodes-base.summarize",
      "position": [
        5100,
        2200
      ],
      "typeVersion": 1,
      "notes": "Summarize - Concatenate Notion's blocks content"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "returnAll": true
      },
      "id": "c7e45cba-0942-4a61-a9c0-d9f1a788907b",
      "name": "Notion Get Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        4740,
        2200
      ],
      "executeOnce": true,
      "credentials": {
        "notionApi": {
          "id": "eyQfrNhyfucklowG",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "54e5667d-a9d0-443a-9807-d15c93656348",
              "name": "content",
              "value": "={{ $json.concatenated_content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "15d77ba7-dc9d-48d2-8642-4c524e0580da",
      "name": "Page - Concatenate",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5280,
        2200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f469534b-3fb9-4969-8b10-53388bb19aa9",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e6355f28-67d2-405a-ae3f-ff444d35f647",
      "name": "Page in Cache?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4340,
        2220
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "=db_notion_{{ $workflow.id }}",
        "keyType": "string",
        "options": {}
      },
      "id": "1c9f5a46-fc6a-4c23-b191-c6636efa2335",
      "name": "Redis Retrive Page",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4160,
        2220
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "90936fac-2408-4395-b13d-a6201d630d4b",
              "name": "content",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e5877e62-b1d7-4f5f-857e-506174deb67d",
      "name": "Page Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4560,
        2480
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=db_notion_{{ $workflow.id }}",
        "value": "={{ $json.content }}",
        "keyType": "string",
        "expire": true,
        "ttl": 600
      },
      "id": "bad6d6f2-e6de-45f4-97ef-6d34b0d48b2d",
      "name": "Redis Set in Cache",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        5460,
        2200
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {
          "maxTokensToSample": 512,
          "temperature": 0
        }
      },
      "id": "d3bead85-98df-497a-9e8b-5634bcf3f3eb",
      "name": "Groq Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        4820,
        2680
      ],
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "call this tool to clean chat memory.",
        "operation": "delete",
        "key": "=memo_{{ $('messageInfo').first().json.unique_id }}_liquid_gas"
      },
      "id": "0cfe3165-c450-467b-a8e3-8085f1b3477e",
      "name": "Reset Memory",
      "type": "n8n-nodes-base.redisTool",
      "typeVersion": 1,
      "position": [
        5700,
        1460
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Utilize esta ferramenta para buscar agendamentos de entrega do usuário. Sempre solicite a data e hora do agendamento e, se disponível, o e-mail do usuário para facilitar a localização.",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "options": {
          "timeMin": "={{ $fromAI('data_after', 'Data e hora da entrega agendada informada pelo usuário menos 12 horas') }}",
          "timeMax": "={{ $fromAI('data_before', 'Data e hora da entrega agendada informada pelo usuário mais 12 horas') }}",
          "fields": ""
        }
      },
      "id": "39652055-953f-4ec5-8817-7edf09af7432",
      "name": "Calendar List Delivery",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        5600,
        1660
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Use esta ferramenta para cancelar agendamentos de entrega, desde que estejam dentro do prazo de 20 minutos após a data e horário inicial. Para cancelar, é necessário o ID do Evento, para isso liste primeiro os agendamentos do usuário.",
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('event_id', 'ID único do agendamento que você deseja cancelar') }}",
        "options": {}
      },
      "id": "a4c06884-85d1-49ee-8c8c-a22b2f1d0178",
      "name": "Calendar Cancel Delivery",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        5500,
        1640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Utilize esta ferramenta para agendar entregas, com um prazo de 1 hora para o agendamento. É necessário preencher os campos obrigatórios: nome completo, endereço de entrega, telefone, data e horário preferidos, e tipo de produto.",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "start": "={{ $fromAI('data_init') }}",
        "end": "={{ $fromAI('data_end') }}",
        "additionalFields": {
          "description": "={{ $fromAI('description', 'Descrição breve do agendamento, incluindo informações importantes como tipo de produto, endereço, telefone, nome do cliente e horário') }}",
          "summary": "={{ $fromAI('summary', 'A concise summary of the appointment, highlighting essential information like purpose and key details') }}"
        }
      },
      "id": "9982ed84-fdea-4160-84ff-72da6b7b741f",
      "name": "Calendar Register Delivery",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        5400,
        1660
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('event_id', 'id do evento') }}",
        "updateFields": {
          "description": "={{ $fromAI('description', 'Descrição breve do agendamento, incluindo informações importantes como tipo de produto, endereço, telefone, nome do cliente e horário') }}",
          "end": "={{ $fromAI('data_end') }}",
          "start": "={{ $fromAI('date_start') }}",
          "summary": "={{ $fromAI('summary', 'A concise summary of the appointment, highlighting essential information like purpose and key details') }}"
        }
      },
      "id": "d56b586b-9c11-4a67-aee0-0c707d933aa9",
      "name": "Calendar Update Delivery",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        5700,
        1640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "returnAll": true,
        "options": {}
      },
      "id": "2c7e29d6-296a-433b-8d52-b495842e6c61",
      "name": "Google Calendar",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.2,
      "position": [
        5020,
        1860
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f5addd6-12c4-4bbd-bce7-6448e90cb9d0",
              "name": "evo_api",
              "value": "={{ $('Webhook').first().json.body.inputs.serverUrl }}",
              "type": "string"
            },
            {
              "id": "d8fa0cad-0b2f-4e61-8d05-5d29829d0156",
              "name": "instance",
              "value": "={{ $('Webhook').first().json.body.inputs.instanceName }}",
              "type": "string"
            },
            {
              "id": "e390ea49-44e4-4aa2-8f1f-9044fd4b27f8",
              "name": "remoteJid",
              "value": "={{ $('Webhook').first().json.body.inputs.remoteJid }}",
              "type": "string"
            },
            {
              "id": "375453f5-c979-48d0-9a77-f2e837c80da5",
              "name": "pushName",
              "value": "={{ $('Webhook').first().json.body.inputs.pushName }}",
              "type": "string"
            },
            {
              "id": "c1179eef-b150-4d05-89c1-3b85660ec6bd",
              "name": "fromMe",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "2ca406cb-0c5a-4e69-a005-ba35e81128da",
              "name": "messageType",
              "value": "={{ $json.body.files?.length ? 'imageMessage' : 'extendedTextMessage' }}",
              "type": "string"
            },
            {
              "id": "f9189c75-e206-4c9d-a538-fadff9121f07",
              "name": "unique_id",
              "value": "={{ $('Webhook').first().json.body.inputs.instanceName }}_{{ $('Webhook').first().json.body.inputs.remoteJid.split('@')[0] }}",
              "type": "string"
            },
            {
              "id": "c6cd82b0-7666-4391-911e-87e0f132ba7b",
              "name": "evo_api_key",
              "value": "={{ $json.body.inputs.apiKey }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "1d2c5ed4-a8ed-46c0-a4e1-4d87b59df24a",
      "name": "baseInfo",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1711,
        1140
      ],
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "content": "## Captura Mensagem\n### Nota: Se for áudios/imagens transcreve para formato de texto\n*Obs.: No final monta estrutura JSON que será usada no restante do fluxo*",
        "height": 699.3376778124559,
        "width": 1629.5604480320626,
        "color": 5
      },
      "id": "3b96f93c-7f1e-4f83-bb79-b7e6c86b4177",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2060,
        1200
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $('Webhook').first().json.body;\nlet response = '';\n\nconst conversation = data.query;\nconst quotedMessage = data.contextInfo?.quotedMessage?.extendedTextMessage?.text;\nconst editedMessage = data.message?.editedMessage?.message?.protocolMessage?.editedMessage?.extendedTextMessage?.text;\n\nif (quotedMessage) {\n  response = `Menção: ${quotedMessage}, Mensagem: ${conversation}`;\n} else if (editedMessage) {\n  response = `${editedMessage}*`;\n} else {\n  response = conversation;\n}\n\n// return { output: $('Chat').first().json.chatInput };\nreturn { output: response };"
      },
      "id": "7d3c5b30-8abe-4ff3-aea9-0977a4f7256a",
      "name": "Format Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3158,
        1320
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $('Webhook').first().json.body;\n\n// data.messageTimestamp\n\nlet milis = $now.toMillis();\n\nreturn {\n  id: null,\n  origin: $('baseInfo').first().json.messageType,\n  output: $json.output,\n  timestamp_local: milis,\n  datetime_local: DateTime.fromSeconds(milis).toFormat('yyyy-MM-dd H:m:s')\n};"
      },
      "id": "1e7b3e22-7bfe-4625-9d73-cad776cf3a6c",
      "name": "Structure Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3560,
        1540
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $('Webhook').first().json.body.data;\nconst caption = data.message?.imageMessage?.caption;\nconst content = $input.item.json.content;\nlet response = '';\n\n// Verifica se o conteúdo existe\nif (content) {\n  response = caption\n    ? `${content} Legenda: ${caption}`\n    : `Transcrição: ${content}`;\n} else {\n  response = 'Erro: json.content ausente para imagem com legenda';\n}\n\nreturn { output: response };"
      },
      "id": "434d3e16-a65e-48bc-a509-f5f9acabd59f",
      "name": "Format Transcription Image",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3160,
        1700
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const content = $input.item.json.text;\nlet response = '';\n\n// Verifica se o conteúdo existe\nif (content) {\n  response = `Transcrição: ${content}`;\n} else {\n  response = 'Erro: json.content ausente para aúdio';\n}\n\nreturn { output: response };"
      },
      "id": "539f321b-65e5-4077-8211-27965c1d4c91",
      "name": "Format Transcription Audio",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3160,
        1540
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.evo_api }}/chat/getBase64FromMediaMessage/{{ $('baseInfo').first().json.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('baseInfo').first().json.evo_api_key }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"message\": {\"key\": {\"id\": \"{{ $('Webhook').item.json.body.data.key.id }}\"}},\n  \"convertToMp4\": false\n}",
        "options": {}
      },
      "id": "eb00db70-c41c-4b08-8d5f-fb3ac1d2f5a5",
      "name": "Get Base64",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2140,
        1640
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "transcricao.ogg",
          "mimeType": "audio/ogg"
        }
      },
      "id": "7e25dde7-4016-4393-9bd2-8cfec32642bf",
      "name": "Convert To Audio",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2500,
        1540
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "imagem.jpeg",
          "mimeType": "image/jpeg"
        }
      },
      "id": "e6f842cd-838c-4ae8-a3cc-b4b3cfe5b248",
      "name": "Convert To Image",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2500,
        1700
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75d6e859-8379-4a34-8daf-b34c6a450a09",
              "name": "output",
              "value": "={{ $json.output.replaceAll('\\n', '\\\\n').replaceAll('**', '*') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d0a98608-6fa5-403c-a907-178250ada5c0",
      "name": "Fix Text 2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3400,
        1540
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('baseInfo').first().json.removeField('messageType').removeField('fromMe').toJsonString() }}",
        "options": {}
      },
      "id": "d2a287ca-9927-4e14-afd8-ea416235e2d8",
      "name": "chatInfo",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        1140
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "groqApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "model",
              "value": "whisper-large-v3"
            },
            {
              "name": "temperature",
              "value": "0.5"
            },
            {
              "name": "response_format",
              "value": "json"
            },
            {
              "name": "language",
              "value": "pt"
            }
          ]
        },
        "options": {}
      },
      "id": "40dfc688-698c-4a55-857d-741cbb63f992",
      "name": "Groq Analyze Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2820,
        1540
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "groqApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Descreva todo o conteúdo da imagem, sem Acentos e sem hífens\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"data:image/jpeg;base64,{{ $('Convert To Image').item.binary.data.data }}\"\n          }\n        }\n      ]\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": \"\"\n    }\n  ],\n  \"model\": \"llama-3.2-11b-vision-preview\",\n  \"temperature\": 1,\n  \"max_tokens\": 1024,\n  \"top_p\": 1,\n  \"stream\": false,\n  \"stop\": null\n}\n",
        "options": {}
      },
      "id": "04efe0ff-e10c-49eb-8e66-bc7fe19467b6",
      "name": "Groq Analyze Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2720,
        1700
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c8ab20a1-b06d-4840-b71f-4c53eb2b005c",
              "name": "content",
              "value": "={{ $json.choices[0].message.content ?? '' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "837aeb86-12db-498e-a74e-dbbd02c39241",
      "name": "Groq Normalize Image",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2940,
        1700
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mediaType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bba31f6b-7dc3-4dac-a090-c38d70065d40",
                    "leftValue": "={{ $json.mediaType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "do nothing"
        }
      },
      "id": "beb7900d-5fbc-4d4e-adca-edbaaeb2efe8",
      "name": "Media Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2280,
        1640
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=data",
        "options": {
          "language": "pt"
        }
      },
      "id": "cfd2fdfb-4ef0-49dc-bc8b-0af108f1f1d1",
      "name": "Analyze Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        3391,
        1240
      ],
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI-2024-07-18"
        },
        "text": "Descreva todo o conteúdo da imagem, sem Acentos e sem hífens",
        "inputType": "base64",
        "options": {}
      },
      "id": "bd508be4-2a20-4587-891a-a6589712fa4e",
      "name": "Analyze Image",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        3551,
        1240
      ],
      "alwaysOutputData": true,
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bot-evolution",
        "options": {}
      },
      "id": "a25612f6-ea0e-485f-a529-534af35b7417",
      "name": "Webhook img",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1540,
        1440
      ],
      "webhookId": "f67c8094-022b-4aef-bb16-c7e430158fd9",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8227619e-aacd-4288-bc21-052d97b77d87",
              "name": "conversation",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f7b8d793-f9e0-44d0-acba-472a498ef8b3",
      "name": "messages",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3740,
        1540
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bot-evolution",
        "options": {}
      },
      "id": "f2a297f3-b9fa-4a5e-a459-8235f771067f",
      "name": "Webhook audio",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1540,
        1280
      ],
      "webhookId": "f67c8094-022b-4aef-bb16-c7e430158fd9",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Execute Workflow Trigger').item.json.query }}",
        "messages": {
          "messageValues": [
            {
              "message": "=<context>\n{{ $json.content }}\n</context>\n\n**Responda somente com informações disponíveis no <context>.**\nSe não tiver a informação no momento ou não estiver seguro, **deixe claro que não é possível fornecer detalhes agora**."
            }
          ]
        }
      },
      "id": "11947918-9629-4d95-a143-a19ac485f9a4",
      "name": "Basic LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        4740,
        2480
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "conversation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "86e7e773-8586-458f-a1fb-2890f2030230",
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "extendedTextMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "msg"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7f108034-a1be-4e90-b42e-e4f8a719e311",
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "editedMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "msg edited"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "256e7cf8-be54-4c41-ba80-2d9eb0a07563",
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "da03e413-3422-419c-af1a-71ff87c307e2",
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {}
      },
      "id": "20f1b430-db04-45f9-b1ff-c497c0d1d327",
      "name": "Message Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2160,
        1360
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "024694c8-c5fb-480f-8821-1c86c7b2e736",
      "name": "Merge 2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        3900,
        1160
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Função 1: Remove caption de links que não são imagens ou vídeos\nfunction removeCaptionFromLinks(text) {\n  // Expressão regular para identificar links que não são imagens ou vídeos\n  const regexLinks = /\\[([^\\]]*)\\]\\((https?:\\/\\/[^\\s]+)\\)/gi;\n  \n  return text.replace(regexLinks, (match, caption, url) => {\n    // Se o link não for de imagem ou vídeo, remove o caption e mantém só a URL\n    if (!url.match(/\\.(jpeg|jpg|png|gif|bmp|webp|avif|mp4|mov|avi|wmv)$/i)) {\n      return url;\n    }\n    return match; // Mantém o link inalterado se for uma imagem ou vídeo\n  });\n}\n\nconst message = $input.item.json.output;\n\n// Primeira função: remove captions de links não-imagens/vídeos\ncleanedMessage = removeCaptionFromLinks(message);\n\nreturn { output: cleanedMessage };"
      },
      "id": "121ab3d0-81e9-4ac1-b531-ff40bb524379",
      "name": "Beautify URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5860,
        1360
      ],
      "executeOnce": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75d6e859-8379-4a34-8daf-b34c6a450a09",
              "name": "message",
              "value": "={{ $json.output.replaceAll('**', '*').replace(/(?<!\\\\)\"/g, '\\\\\"') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d7c7a087-8d61-4566-a50b-7348cd518a95",
      "name": "Fix Text",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6020,
        1360
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "f67c8094-022b-4aef-bb16-c7e430158fd0",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "e9c405f2-c8bc-498e-910a-8db351409d13",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1540,
        1140
      ],
      "webhookId": "f67c8094-022b-4aef-bb16-c7e430158fd9"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('messageInfo').first().json.conversation }}",
        "options": {
          "systemMessage": "={{ $('config prompt').item.json.system }}",
          "returnIntermediateSteps": false
        }
      },
      "id": "54852ce0-c950-414a-869e-110d6017c58b",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        5156,
        1363
      ],
      "retryOnFail": true,
      "waitBetweenTries": 3000
    },
    {
      "parameters": {
        "public": true,
        "options": {
          "responseMode": "lastNode"
        }
      },
      "id": "bef50c2f-3b3a-4ba7-adfe-e2ffeabfd8a7",
      "name": "Chat",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        3900,
        940
      ],
      "webhookId": "50180edd-90da-4d06-ae5b-6b125e227faa"
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "query": "preço do gás de cozinha"
        }
      }
    ],
    "Webhook img": [
      {
        "json": {
          "headers": {
            "connection": "keep-alive",
            "host": "n8n.wmst.com.br",
            "x-forwarded-scheme": "https",
            "x-forwarded-proto": "https",
            "x-forwarded-for": "10.0.0.2",
            "x-real-ip": "10.0.0.2",
            "content-length": "495",
            "accept": "application/json, text/plain, */*",
            "content-type": "application/json",
            "authorization": "Bearer teste",
            "user-agent": "axios/1.7.7",
            "accept-encoding": "gzip, compress, deflate, br"
          },
          "params": {},
          "query": {},
          "body": {
            "inputs": {
              "sessionId": "cm21e99jw02qg7rlyg6zoudlb",
              "remoteJid": "5512982184879@s.whatsapp.net",
              "pushName": "W.M. Soluções Tecnologicas",
              "instanceName": "ibox_cli_23",
              "serverUrl": "https://apiwp.wmst.com.br",
              "apiKey": "PxzMJa1fEWPgCdgpGjz7kftLwaV857RI"
            },
            "query": "teste",
            "user": "5512982184879@s.whatsapp.net",
            "files": [
              {
                "type": "image",
                "url": "https://s3.wmst.com.br/evolution/evolution-api/2e872b5c-6dd8-48fc-8cbf-f5a7f3626ca1/5512982184879%40s.whatsapp.net/imageMessage/3EB000D935EED47EFD4751.jpeg"
              }
            ]
          },
          "webhookUrl": "https://webhook.n8n.wmst.com.br/webhook-test/bot-evolution",
          "executionMode": "test"
        }
      }
    ],
    "Webhook audio": [
      {
        "json": {
          "headers": {
            "connection": "keep-alive",
            "host": "n8n.wmst.com.br",
            "x-forwarded-scheme": "https",
            "x-forwarded-proto": "https",
            "x-forwarded-for": "10.0.0.2",
            "x-real-ip": "10.0.0.2",
            "content-length": "735",
            "accept": "application/json, text/plain, */*",
            "content-type": "application/json",
            "authorization": "Bearer teste",
            "user-agent": "axios/1.7.7",
            "accept-encoding": "gzip, compress, deflate, br"
          },
          "params": {},
          "query": {},
          "body": {
            "inputs": {
              "sessionId": "cm21e99jw02qg7rlyg6zoudlb",
              "remoteJid": "5512982184879@s.whatsapp.net",
              "pushName": "W.M. Soluções Tecnologicas",
              "instanceName": "ibox_cli_23",
              "serverUrl": "https://apiwp.wmst.com.br",
              "apiKey": "PxzMJa1fEWPgCdgpGjz7kftLwaV857RI"
            },
            "query": "audioMessage|https://s3.wmst.com.br/evolution/evolution-api/2e872b5c-6dd8-48fc-8cbf-f5a7f3626ca1/5512982184879%40s.whatsapp.net/audioMessage/3EB01D59D9D9BB6B6CB7E9.oga?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=jPRmOTE4HpOKGlrQR9oa%2F20241009%2Feu-west-3%2Fs3%2Faws4_request&X-Amz-Date=20241009T045339Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=5eee4b3dc33b95592e95003548e334ba72ab133f559799428f7fdd85b38371a1",
            "user": "5512982184879@s.whatsapp.net"
          },
          "webhookUrl": "https://webhook.n8n.wmst.com.br/webhook-test/bot-evolution",
          "executionMode": "test"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-09-27T14:34:01.317Z",
      "updatedAt": "2024-09-27T14:34:01.317Z",
      "id": "ZoTSEGR97fzorfDz",
      "name": "AI"
    },
    {
      "createdAt": "2024-10-08T13:33:46.636Z",
      "updatedAt": "2024-10-08T13:33:46.636Z",
      "id": "aSNW5tPyOIOEr9rS",
      "name": "Agent"
    },
    {
      "createdAt": "2024-09-27T17:42:17.034Z",
      "updatedAt": "2024-09-27T17:42:17.034Z",
      "id": "TsfCA8eZuTObjOfy",
      "name": "Backup"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-10-30T15:22:42.496Z",
  "versionId": "718707c7-0ec5-470b-b313-55d6f7d5055c"
}