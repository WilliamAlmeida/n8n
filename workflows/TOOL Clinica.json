{
  "active": false,
  "connections": {
    "EWT": {
      "main": [
        [
          {
            "node": "Request to Tool?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query": {
      "main": [
        [
          {
            "node": "EWT 2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "EWT Fixed": {
      "main": [
        [
          {
            "node": "EWT 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contextual Compression Retriever": {
      "ai_retriever": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Retriever": {
      "ai_retriever": [
        [
          {
            "node": "Contextual Compression Retriever",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Question and Answer Chain": {
      "main": [
        [
          {
            "node": "Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Contextual Compression Retriever",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Question and Answer Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Qdant Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Qdant Vector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Retriever",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Appointment Scheduling Agent": {
      "main": [
        [
          {
            "node": "Response2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Availability Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Find Existing Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cancel Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reschedule Appt Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Chat": {
      "main": [
        [
          {
            "node": "Query",
            "type": "main",
            "index": 0
          },
          {
            "node": "EWT Fixed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request to Tool?": {
      "main": [
        [
          {
            "node": "Switch Tool",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Agent": {
      "main": [
        [
          {
            "node": "Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset Memo": {
      "main": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize": {
      "main": [
        [
          {
            "node": "Reset Memo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Update User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update User": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete User Account",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EWT 2": {
      "main": [
        [
          {
            "node": "Request to Tool?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response In Development": {
      "main": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Specialists Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Exams Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Calendar Event Tool": {
      "ai_tool": [
        [
          {
            "node": "Appointment Scheduling Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Switch Tool": {
      "main": [
        [
          {
            "node": "Response In Development",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-15T18:33:48.659Z",
  "id": "JZY3GPC55leuxyHn",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "TOOL Clinica",
  "nodes": [
    {
      "parameters": {},
      "id": "031ea9fc-c53f-4a6f-88be-a070538aa4d6",
      "name": "EWT",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        740,
        760
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a1123d8e-c791-4dda-bbd0-e24c5b1d35d2",
              "name": "query",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "id": "9ec9d580-43c2-4945-aaad-7f1f28b18556",
      "name": "Query",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        520,
        920
      ],
      "disabled": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"query\": \"\",\n  \"agent\": \"calendar\",\n  \"messageInfo\": {\n    \"evo_api\": \"https://apiwp.wmst.com.br\",\n    \"instance\": \"ibox_cli_23\",\n    \"remoteJid\": \"5512982184879@s.whatsapp.net\",\n    \"pushName\": \"W.M. Soluções Tecnologicas\",\n    \"fromMe\": false,\n    \"unique_id\": \"william_5512982184879\",\n    \"debounce_time\": 5,\n    \"conversation\": \"as 17hrs\"\n  },\n  \"userAccount\": {\n    \"id\": 10,\n    \"remoteJid\": 5512982184879,\n    \"name\": \"William\",\n    \"email\": \"williamkillerca@hotmail.com\",\n    \"date_birth\": null,\n    \"address\": null,\n    \"created_at\": \"2024-11-18T04:17:02.326408+00:00\"\n  }\n}",
        "options": {}
      },
      "id": "be94c5e9-9db6-4c9d-8d3a-dec6a39dd78a",
      "name": "EWT Fixed",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        520,
        1080
      ],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "80fcf8d3-0a4e-47b6-ac93-e701d21f1db6",
      "name": "Contextual Compression Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrieverContextualCompression",
      "typeVersion": 1,
      "position": [
        1680,
        440
      ],
      "disabled": true
    },
    {
      "parameters": {
        "topK": "={{ $json.slots }}"
      },
      "id": "cfcd75ea-4251-4628-88d9-396589171d7c",
      "name": "Vector Store Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
      "typeVersion": 1,
      "position": [
        1960,
        440
      ],
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemPromptTemplate": "Use the following pieces of context to answer the users question. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}"
        }
      },
      "id": "93ba3023-aa4c-4b47-bb1f-7d21841045c0",
      "name": "Question and Answer Chain",
      "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
      "typeVersion": 1.3,
      "position": [
        1560,
        240
      ],
      "disabled": true
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {
          "temperature": 0
        }
      },
      "id": "55e590d8-f110-455f-9290-9597ba46e430",
      "name": "Groq Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1560,
        440
      ],
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "e099ff70-e0ca-42ef-9c3d-4cfb790973a5",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        2520,
        440
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "qdrantCollection": {
          "__rl": true,
          "value": "notion_faro",
          "mode": "list",
          "cachedResultName": "notion_faro"
        },
        "options": {
          "searchFilterJson": "={\n  \"should\": [\n    {\n      \"key\": \"metadata.type\",\n      \"match\": {\n        \"value\": \"{{ $('EWT').item.json.type ?? '' }}\"\n      }\n    }\n  ]\n}"
        }
      },
      "id": "2899748b-af1e-4b24-ae12-1409240e7eb8",
      "name": "Qdant Vector Store1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        2240,
        440
      ],
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.tool }}",
                    "rightValue": "rag",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "RAG"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "42639684-02d9-4a30-96b2-cf1cb1df7b74",
                    "leftValue": "={{ $json.tool }}",
                    "rightValue": "supabase",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "supabase"
            }
          ]
        },
        "options": {}
      },
      "id": "6ce5f04b-155b-4f55-9972-ed22f2b8cc00",
      "name": "Switch Tool",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1160,
        740
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93b3a4ae-a50c-4b62-9872-f980bc19054c",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "84c653aa-55b7-408c-a70a-e65247e2ef30",
      "name": "Response2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2020,
        1140
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=You are an appointment scheduling helper.\n\n## Context:\nThe current date and time is '{{ $now.setLocale('en').weekdayLong }}, {{ $now.format(\"dd MMM yyyy HH:mm\") }}'.\nAll dates should be in ISO format.\nDuration of consultations is 60 minutes.\nAlways display booking ID and UID.\nDates should be displayed in d/M/Y format.\nUse a full-day range for availability checks.\nUse calendar ID to retrieve event id (data of calendar).\n\n<previously mapped data>\nEmail Address: `{{ $json.userAccount.email ? $json.userAccount.email : '' }}`\nCellphone number: `{{ $json.messageInfo.remoteJid.split('@')[0] }}`\nFull name: `{{ $json.userAccount.name ? $json.userAccount.name : $json.messageInfo.pushName }}`\nAddress: `{{ $json.userAccount.endereco ?? '' }}`\n</previously mapped data>\n\n## Workflow Guidelines:\n1. **New Booking**:\n   - Ask if the user has an existing booking before proceeding.\n   - Collect Missing Information:\n      Explicitly inform the user about the information already available and only request what is missing: Email address, Full name, Cellphone number, Proposed date and preferred start time.\n\n   - Verify availability using the \"availability\" tool.\n   - If available, use \"schedule_appt_tool\" to book the appointment.\n   - Confirm the booking and provide the ID and UID to the user.\n\n2. **Existing Bookings**:\n   - Ask for the booking UID or email address to locate the booking if not provided.\n   - If the email address is identified or mapped, use it to locate the booking automatically without asking for confirmation.\n   - Use \"get_existing_appt_tool\" or \"find_existing_appt_tool\" to retrieve details.\n\n3. **Rescheduling**:\n   - Ask for the booking UID.\n   - Use \"reschedule_appt_tool\" with the new date and time.\n   - Confirm with the user before rescheduling.\n\n4. **Cancellation**:\n  - Ask for the reservation UID and reason for cancellation.\n  - Use \"cancel_appt_tool\" to cancel the booking.\n  - Confirm with the user before proceeding.\n\n5. **Check Availability**\n  - Ask for professional or exam.\n  - Use \"list_specialists_tool\" to retrive event_id from professional.\n  - Use \"list_exams_tool\" to retrive event_id from exam.\n\n5. **Errors and Feedback**:\n   - Notify the user if inputs are missing or invalid.\n   - Suggest corrections or alternatives where applicable.",
          "maxIterations": 7
        }
      },
      "id": "4babc4bb-6c11-40f7-afb6-bfc121f313cd",
      "name": "Appointment Scheduling Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        1700,
        1140
      ],
      "notes": "You are an appointment scheduling helper for consultant named William.\n\n## About William\nWilliam is a São Paulo-based consultant specialising in Laravel, n8n and AI. His website is wmst.com.br.\n\n## About the appointments\nAlways start your conversation by politely asking if the user wants to book a new appointment or enquire about an existing one.\nThe date and time now is {{ $now.toISO() }}. All dates should be given in the ISO format.\nEach appointment should have a start and end date and time relative to today's date in the future.\nAll appointments are strictly 30mins long.\n\n## To book an appointment\n* Before booking an appointment, ask if the user has an existing appointment.\n* Ensure you have the user's email address, full name and proposed date, preferred start time before booking an appointment.\n* Always check the calendar availability of the user's proposed date and time. If there is no availability, suggest the next available appointment slot.\n* If the appointment booking is successful, notify the user that an email confirmation will be sent to their provided email address.\n* If the appointment booking is unsuccessful, notify the user that you are unable to complete their request at the moment and to try again later.\n\n## To find an existing appointment\n* Ask the user for their email address and date of the existing booking\n* Use the user's email and date to search for the existing booking.\n* If the user's email and date do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.\n\n# To reschedule or cancel an existing appointment\n* First find the existing appointment so that you may obtain the existing appointment's booking ID.\n* Display this booking ID to the user.\n* Use this booking ID to reschedule or cancel an existing appointment.\n* If an existing appointment ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to cancel an appointment, ask for a reason for the cancellation and suggest rescheduling as an alternative. Confirm with user before cancelling an appointment.\n\n## About the user\nThe user's session id is {{ $json.sessionId }}"
    },
    {
      "parameters": {
        "name": "get_availability_tool",
        "description": "Call this tool to get availability for appointments using event ID.\n\n## Inputs Required:\n- Event ID (number, required).\n- Start date and time in ISO format (string, required).\n- End date and time in ISO format (string, required).\n\n## Workflow:\n1. Use the event ID to check available slots.\n2. Return all available time slots for the specified event.",
        "workflowId": {
          "__rl": true,
          "value": "5LfFRdaepFJdM4yE",
          "mode": "list",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "availability"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"event_id\": {\n      \"type\": \"string\",\n      \"description\": \"Event ID of the professional for which you want to check availability\"\n    },\n    \"startTime\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"description\": \"Start date and time of the appointment in ISO 8601 format (e.g., '2024-11-18T08:00:00Z')\"\n    },\n    \"endTime\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"description\": \"End date and time of the appointment in ISO 8601 format. If not provided, the default will be 24 hours after 'startTime'. If provided, the end time must be within 3 days of the 'startTime'.\"\n    }\n  },\n  \"required\": [\n    \"event_id\",\n    \"startTime\",\n    \"endTime\"\n  ]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2060,
        1440
      ],
      "id": "edc94a5f-7ab6-43d4-ba0e-9a341f9d256e",
      "name": "Get Availability Tool"
    },
    {
      "parameters": {
        "name": "get_existing_appt_tool",
        "description": "=Call this tool to retrieve details of an existing booking using a booking UID.\n\n## Inputs Required:\n- Booking UID (string, required).\n\n## Workflow:\n1. Provide the booking UID to locate the existing booking.\n2. Return the booking details or notify if not found.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "find booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"booking_uid\": {\n      \"type\": \"string\",\n      \"description\": \"Booking UID of the booking\"\n    }\n  },\n  \"required\": [\"booking_uid\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2180,
        1420
      ],
      "id": "7f237841-e763-4397-9870-b1c4777cde63",
      "name": "Get Existing Appt Tool",
      "disabled": true
    },
    {
      "parameters": {
        "name": "find_existing_appt_tool",
        "description": "=Call this tool to find existing reservations using the user's email address.\n\n## Inputs Required:\n- User email (string, required).\n- Event ID (string, optional).\n- Status (string, optional, default: \"all\").\n\n## Workflow:\n1. Search for bookings matching the provided email.\n2. Return matching reservations or notify if not found.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "list bookings"
            },
            {
              "name": "remoteJid",
              "stringValue": "={{ $json.messageInfo.remoteJid.split('@')[0] }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"attendeeEmail\": {\n      \"type\": \"string\",\n      \"description\": \"Email address of the user\"\n    },\n    \"event_id\": {\n      \"type\": \"string\",\n      \"description\": \"Event ID to filter bookings\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"Status of the booking (e.g., upcoming, past, cancelled)\",\n      \"default\": \"all\"\n    }\n  },\n  \"required\": [\"email\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2540,
        1360
      ],
      "id": "4dd86eb4-e62e-4eb1-aa78-07e5772bba38",
      "name": "Find Existing Appt Tool"
    },
    {
      "parameters": {
        "name": "cancel_appt_tool",
        "description": "=Call this tool to cancel an appointment using a booking UID.\n\n## Inputs Required:\n- Booking UID (string, required).\n- Reason for cancellation (string, required).\n\n## Workflow:\n1. Verify the booking UID before proceeding.\n2. Confirm with the user before cancelling.\n3. Cancel the appointment and notify the user.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "cancel booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"booking_uid\": {\n      \"type\": \"string\",\n      \"description\": \"Booking UID of the booking\"\n    },\n    \"cancellationReason\": {\n      \"type\": \"string\",\n      \"description\": \"Reason for cancellation\"\n    }\n  },\n  \"required\": [\"booking_uid\", \"cancellationReason\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2420,
        1380
      ],
      "id": "ac72bff6-f5b8-4597-bd79-d21574a4695c",
      "name": "Cancel Appt Tool"
    },
    {
      "parameters": {
        "name": "schedule_appt_tool",
        "description": "Call this tool to schedule a booking.\n\n## Inputs Required:\n- User email (string, required).\n- Full name (string, required).\n- Proposed start date and time in ISO format (string, required).\n- Cellphone (string, required).\n\n## Workflow:\n1. Verify availability of the proposed date and time using the \"availability\" tool.\n2. Ensure all inputs are valid before proceeding.\n3. If scheduling fails, log the issue and notify the user.\n4. Confirm the booking and notify the user of the booking UID.\n",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "schedule booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\"type\":\"object\",\"properties\":{\"start\":{\"type\":\"string\",\"description\":\"Date and time of the start of the booking in ISO format\"},\"title\":{\"type\":\"string\",\"description\":\"Title of the appointment\"},\"description\":{\"type\":\"string\",\"description\":\"Description of the appointment\"},\"attendee\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"}},\"required\":[\"name\",\"email\"]},\"event_id\":{\"type\":\"string\",\"description\":\"Event ID related to the booking\"},\"bookingFieldsResponses\":{\"type\":\"object\",\"properties\":{\"notes\":{\"type\":\"string\"},\"cellphone\":{\"type\":\"string\",\"description\":\"12982184877\"},\"professional\":{\"type\":\"string\"},\"procedure\":{\"type\":\"string\"},\"method_payment\":{\"type\":\"string\"},\"name_plan\":{\"type\":\"string\"},\"price\":{\"type\":\"string\"}},\"required\":[\"cellphone\",\"professional\",\"procedure\"]}},\"required\":[\"start\",\"title\",\"attendee\",\"event_id\",\"bookingFieldsResponses\"]}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1940,
        1460
      ],
      "id": "c56148c9-e174-4896-8c12-f6eff039ed39",
      "name": "Schedule Appt Tool"
    },
    {
      "parameters": {
        "name": "reschedule_appt_tool",
        "description": "=Call this tool to reschedule an appointment using a booking UID.\n\n## Required inputs:\n- Booking UID (string, required).\n- Proposed start date and time in ISO format (string, required).\n- Reason for rescheduling (string, required).\n\n## Workflow:\n1. Verify the booking UID before proceeding.\n2. Confirm with the user before rescheduling.\n3. Reschedule the appointment and notify the user.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "5LfFRdaepFJdM4yE",
          "cachedResultName": "COMP Cal.com"
        },
        "fields": {
          "values": [
            {
              "name": "action",
              "stringValue": "reschedule booking"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n\"type\": \"object\",\n  \"properties\": {\n    \"booking_uid\": {\n      \"type\": \"string\",\n      \"description\": \"the uid of the booking\"\n    },\n    \"start\": {\n      \"type\": \"string\",\n      \"description\": \"date and time of the start of the booking\"\n    },\n    \"reschedulingReason\": {\n      \"type\": \"string\",\n      \"description\": \"rescheduling reason\"\n    }\n  },\n  \"required\": [\n    \"booking_id\",\n    \"start\",\n    \"reschedulingReason\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        2300,
        1400
      ],
      "id": "0fb315e4-d637-4167-b8b0-cf776e9a551e",
      "name": "Reschedule Appt Tool"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=memo_{{ $('EWT').first().json.messageInfo.unique_id }}_clinica_calendar",
        "sessionTTL": 300
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.3,
      "position": [
        1640,
        1360
      ],
      "id": "690c918f-448f-416a-b23a-d8b056fddc1c",
      "name": "Chat Memory",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "temperature": 0,
          "topP": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1520,
        1380
      ],
      "id": "5e0c3074-7231-4059-b25e-2578852771c4",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1400,
        1400
      ],
      "id": "8f308a70-9a11-445d-ba7b-091000666b71",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "content": "## Function Cal",
        "height": 240,
        "width": 760,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1900,
        1340
      ],
      "id": "f49b0c91-1cbb-45bf-85eb-c1c5e6d56ffc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "760374de-6e34-46ca-9918-905a36c32c1d",
      "name": "Chat",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        320,
        1000
      ],
      "webhookId": "650c5a0e-0f76-49b7-8046-7cb7850e412d",
      "disabled": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "23b0e203-6fae-425e-8945-9bf9e5eb437c",
      "name": "EWT 2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        740,
        1000
      ],
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3d3f5973-0888-4a4a-9b95-74a7908fcf4c",
              "leftValue": "={{ $json.agent }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "309a8f36-ceba-4d09-a0ff-97bba24c00d3",
      "name": "Request to Tool?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        760
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.agent }}",
                    "rightValue": "calendar",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "calendar"
            }
          ]
        },
        "options": {}
      },
      "id": "ca609f71-ebaf-427b-b5d4-c2adfd9472ab",
      "name": "Switch Agent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1120,
        1140
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=memo_{{ $('EWT').first().json.messageInfo.unique_id }}_clinica_calendar"
      },
      "id": "8d9813e1-5af7-459b-966a-8489f332debb",
      "name": "Reset Memo",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1520,
        1140
      ],
      "alwaysOutputData": true,
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b49db797-0bdf-457d-8ba0-e7cf175881e5",
              "name": "response",
              "value": "={{ $json.response.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4f2d1555-c5dd-47d4-ac12-392d83dafbfa",
      "name": "Response1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        240
      ],
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b49db797-0bdf-457d-8ba0-e7cf175881e5",
              "name": "response",
              "value": "=in development",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "16a11653-c133-4f38-943a-06bf9e07de80",
      "name": "Response In Development",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1400,
        240
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "53985a03-c355-4121-b058-0b87b0f8437d",
              "name": "query",
              "value": "={{ $json.query }}",
              "type": "string"
            },
            {
              "id": "b7ec07ee-1c3d-4b54-9be3-6c57b4ca0753",
              "name": "messageInfo",
              "value": "={{ $json.messageInfo }}",
              "type": "object"
            },
            {
              "id": "d488e141-67d9-47a1-a6f1-8387677abdeb",
              "name": "userAccount",
              "value": "={{ $json.userAccount }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1320,
        1140
      ],
      "id": "91fb783d-aef6-4a47-b4a9-931c93b6c7c8",
      "name": "Normalize"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "update user",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "user account"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1440,
        760
      ],
      "id": "82c3ff87-4990-48bb-96fd-e6987c840ac6",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "clinic_users",
        "filters": {
          "conditions": [
            {
              "keyName": "remoteJid",
              "condition": "eq",
              "keyValue": "={{ $json.messageInfo.remoteJid.split('@')[0] }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "={{ $json.query.key }}",
              "fieldValue": "={{ $json.query.value }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1640,
        760
      ],
      "id": "f009a914-e442-4fad-a7b4-2d5c0e1dcee6",
      "name": "Update User",
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "WWYYqpMcDDFZTW3g",
          "name": "william"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8cb2031b-a2ee-4f48-8968-d3362cbb4ba6",
              "name": "response",
              "value": "={{ $json.error ?? 'done' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        860
      ],
      "id": "e2fa2399-2e58-46a1-9c1e-6ab6921ee362",
      "name": "Response"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=user_account_{{ $json.remoteJid }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1880,
        700
      ],
      "id": "12b31f46-a7da-4278-885c-6a214024bb61",
      "name": "Delete User Account",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "content": "## Update User Data in Supabase\nName, email, date birth or address and\nreset cache to bring the new data.",
        "height": 360,
        "width": 660,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1400,
        660
      ],
      "id": "ccd0b762-cdbf-42b9-ae12-5243ec9f1516",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "name": "list_exams_tool",
        "description": "Call this tool to obtain CALENDAR ID of exam and him use on calendar_event_id_tool to retrive event ID to use on booking.\n\n## Workflow:\n1. Use the tool to retrieve the calendar ID.\n2. Return calendar ids as list.",
        "workflowId": {
          "__rl": true,
          "value": "pliyk2HChCR880pK",
          "mode": "list",
          "cachedResultName": "Comp Clinica"
        },
        "fields": {
          "values": [
            {
              "name": "tool",
              "stringValue": "exams"
            },
            {
              "name": "messageInfo",
              "type": "objectValue",
              "objectValue": "={{ $json.messageInfo }}"
            }
          ]
        },
        "jsonSchemaExample": ""
      },
      "id": "387571a8-baf3-4ee7-8aee-7d6954aeddd2",
      "name": "Exams Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1560,
        1600
      ]
    },
    {
      "parameters": {
        "name": "specialists_tool",
        "description": "Call this tool to obtain CALENDAR ID of specialist (doctor) and him use on calendar_event_id_tool to retrive event ID to use on booking.\n\n## Workflow:\n1. Use the tool to retrieve the calendar ID.\n2. Return calendar ids as list.",
        "workflowId": {
          "__rl": true,
          "value": "pliyk2HChCR880pK",
          "mode": "list",
          "cachedResultName": "Comp Clinica"
        },
        "fields": {
          "values": [
            {
              "name": "tool",
              "stringValue": "specialists"
            },
            {
              "name": "messageInfo",
              "type": "objectValue",
              "objectValue": "={{ $json.messageInfo }}"
            }
          ]
        }
      },
      "id": "95da37b0-79ca-416a-881d-315f23ff01ba",
      "name": "Specialists Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1740,
        1600
      ]
    },
    {
      "parameters": {
        "name": "eventId_by_calendarId_tool",
        "description": "Call this tool to obtain and verify event id that wil be used to schedule a consult with doctors or exams.\n\n## Required inputs:\n- Calendar ID (number, required).\n\n## Workflow:\n1. Use the calendar ID to retrieve the event ID.\n2. Return all calendar's information to manage a booking.",
        "workflowId": {
          "__rl": true,
          "value": "pliyk2HChCR880pK",
          "mode": "list",
          "cachedResultName": "Comp Clinica"
        },
        "fields": {
          "values": [
            {
              "name": "tool",
              "stringValue": "calendar details"
            },
            {
              "name": "messageInfo",
              "type": "objectValue",
              "objectValue": "={{ $json.messageInfo }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n\"type\": \"object\",\n\"properties\": {\n\t\"calendar_id\": {\n\t\t\"type\": \"number\",\n\t\t\"description\": \"calendar's id\"\n\t\t}\n\t}\n}"
      },
      "id": "b3c38e6b-2b25-40ec-bb2a-d94c63416790",
      "name": "Get Calendar Event Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1640,
        1700
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-09-27T14:34:01.317Z",
      "updatedAt": "2024-09-27T14:34:01.317Z",
      "id": "ZoTSEGR97fzorfDz",
      "name": "AI"
    },
    {
      "createdAt": "2024-09-27T17:42:17.034Z",
      "updatedAt": "2024-09-27T17:42:17.034Z",
      "id": "TsfCA8eZuTObjOfy",
      "name": "Backup"
    },
    {
      "createdAt": "2024-10-30T23:31:05.255Z",
      "updatedAt": "2024-10-30T23:31:05.255Z",
      "id": "IDsda42rHm8bi7eR",
      "name": "Tool"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-11-21T00:55:07.102Z",
  "versionId": "236664fd-8cdc-4795-8e7d-7c9c2ba9bb39"
}